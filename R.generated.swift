//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `HurmeGeometricSans1-Regular`.
    static let hurmeGeometricSans1Regular = Rswift.FontResource(fontName: "HurmeGeometricSans1-Regular")
    /// Font `TruenoLt`.
    static let truenoLt = Rswift.FontResource(fontName: "TruenoLt")
    /// Font `TruenoRg`.
    static let truenoRg = Rswift.FontResource(fontName: "TruenoRg")
    
    /// `UIFont(name: "HurmeGeometricSans1-Regular", size: ...)`
    static func hurmeGeometricSans1Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hurmeGeometricSans1Regular, size: size)
    }
    
    /// `UIFont(name: "TruenoLt", size: ...)`
    static func truenoLt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: truenoLt, size: size)
    }
    
    /// `UIFont(name: "TruenoRg", size: ...)`
    static func truenoRg(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: truenoRg, size: size)
    }
    
    static func validate() throws {
      if R.font.hurmeGeometricSans1Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HurmeGeometricSans1-Regular' could not be loaded, is 'HurmeGeometricSans1 Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.truenoLt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TruenoLt' could not be loaded, is 'truenolt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.truenoRg(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TruenoRg' could not be loaded, is 'truenorg.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `arrow_down`.
    static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down")
    /// Image `arrow_up`.
    static let arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_up")
    /// Image `backspace`.
    static let backspace = Rswift.ImageResource(bundle: R.hostingBundle, name: "backspace")
    /// Image `calculator_unselected`.
    static let calculator_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "calculator_unselected")
    /// Image `calculator`.
    static let calculator = Rswift.ImageResource(bundle: R.hostingBundle, name: "calculator")
    /// Image `change`.
    static let change = Rswift.ImageResource(bundle: R.hostingBundle, name: "change")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `crown`.
    static let crown = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown")
    /// Image `currency_unselected`.
    static let currency_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "currency_unselected")
    /// Image `currency`.
    static let currency = Rswift.ImageResource(bundle: R.hostingBundle, name: "currency")
    /// Image `even`.
    static let even = Rswift.ImageResource(bundle: R.hostingBundle, name: "even")
    /// Image `hook`.
    static let hook = Rswift.ImageResource(bundle: R.hostingBundle, name: "hook")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `marker_up`.
    static let marker_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker_up")
    /// Image `member_header`.
    static let member_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "member_header")
    /// Image `member_unselected`.
    static let member_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "member_unselected")
    /// Image `member`.
    static let member = Rswift.ImageResource(bundle: R.hostingBundle, name: "member")
    /// Image `more_unselected`.
    static let more_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_unselected")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `nopicture`.
    static let nopicture = Rswift.ImageResource(bundle: R.hostingBundle, name: "nopicture")
    /// Image `picture`.
    static let picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture")
    /// Image `setting_unselected`.
    static let setting_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_unselected")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    
    /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
    static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_up", bundle: ..., traitCollection: ...)`
    static func arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backspace", bundle: ..., traitCollection: ...)`
    static func backspace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backspace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calculator", bundle: ..., traitCollection: ...)`
    static func calculator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calculator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calculator_unselected", bundle: ..., traitCollection: ...)`
    static func calculator_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calculator_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "change", bundle: ..., traitCollection: ...)`
    static func change(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crown", bundle: ..., traitCollection: ...)`
    static func crown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "currency", bundle: ..., traitCollection: ...)`
    static func currency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "currency_unselected", bundle: ..., traitCollection: ...)`
    static func currency_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currency_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "even", bundle: ..., traitCollection: ...)`
    static func even(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.even, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hook", bundle: ..., traitCollection: ...)`
    static func hook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marker_up", bundle: ..., traitCollection: ...)`
    static func marker_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marker_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "member", bundle: ..., traitCollection: ...)`
    static func member(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "member_header", bundle: ..., traitCollection: ...)`
    static func member_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "member_unselected", bundle: ..., traitCollection: ...)`
    static func member_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_unselected", bundle: ..., traitCollection: ...)`
    static func more_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nopicture", bundle: ..., traitCollection: ...)`
    static func nopicture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nopicture, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "picture", bundle: ..., traitCollection: ...)`
    static func picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting_unselected", bundle: ..., traitCollection: ...)`
    static func setting_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_unselected, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 15 nibs.
  struct nib {
    /// Nib `AdView`.
    static let adView = _R.nib._AdView()
    /// Nib `AnnouncementView`.
    static let announcementView = _R.nib._AnnouncementView()
    /// Nib `BankCell`.
    static let bankCell = _R.nib._BankCell()
    /// Nib `BankHeader`.
    static let bankHeader = _R.nib._BankHeader()
    /// Nib `ConverterCell`.
    static let converterCell = _R.nib._ConverterCell()
    /// Nib `ConverterHeader`.
    static let converterHeader = _R.nib._ConverterHeader()
    /// Nib `CurrencyCell`.
    static let currencyCell = _R.nib._CurrencyCell()
    /// Nib `DashBoard`.
    static let dashBoard = _R.nib._DashBoard()
    /// Nib `DivergenceLabel`.
    static let divergenceLabel = _R.nib._DivergenceLabel()
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `MoreCell`.
    static let moreCell = _R.nib._MoreCell()
    /// Nib `MoreHeader`.
    static let moreHeader = _R.nib._MoreHeader()
    /// Nib `NumberPad`.
    static let numberPad = _R.nib._NumberPad()
    /// Nib `OptionView`.
    static let optionView = _R.nib._OptionView()
    /// Nib `RecordCell`.
    static let recordCell = _R.nib._RecordCell()
    
    /// `UINib(name: "AdView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adView) instead")
    static func adView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adView)
    }
    
    /// `UINib(name: "AnnouncementView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.announcementView) instead")
    static func announcementView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.announcementView)
    }
    
    /// `UINib(name: "BankCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bankCell) instead")
    static func bankCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankCell)
    }
    
    /// `UINib(name: "BankHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bankHeader) instead")
    static func bankHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankHeader)
    }
    
    /// `UINib(name: "ConverterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.converterCell) instead")
    static func converterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.converterCell)
    }
    
    /// `UINib(name: "ConverterHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.converterHeader) instead")
    static func converterHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.converterHeader)
    }
    
    /// `UINib(name: "CurrencyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyCell) instead")
    static func currencyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyCell)
    }
    
    /// `UINib(name: "DashBoard", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dashBoard) instead")
    static func dashBoard(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashBoard)
    }
    
    /// `UINib(name: "DivergenceLabel", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.divergenceLabel) instead")
    static func divergenceLabel(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.divergenceLabel)
    }
    
    /// `UINib(name: "LoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingView) instead")
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    
    /// `UINib(name: "MoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moreCell) instead")
    static func moreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreCell)
    }
    
    /// `UINib(name: "MoreHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moreHeader) instead")
    static func moreHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreHeader)
    }
    
    /// `UINib(name: "NumberPad", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.numberPad) instead")
    static func numberPad(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.numberPad)
    }
    
    /// `UINib(name: "OptionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.optionView) instead")
    static func optionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.optionView)
    }
    
    /// `UINib(name: "RecordCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recordCell) instead")
    static func recordCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recordCell)
    }
    
    static func adView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.adView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func announcementView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.announcementView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func bankCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankCell? {
      return R.nib.bankCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankCell
    }
    
    static func bankHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankHeader? {
      return R.nib.bankHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankHeader
    }
    
    static func converterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterCell? {
      return R.nib.converterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterCell
    }
    
    static func converterHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterHeader? {
      return R.nib.converterHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterHeader
    }
    
    static func currencyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyCell? {
      return R.nib.currencyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyCell
    }
    
    static func dashBoard(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DashBoard? {
      return R.nib.dashBoard.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashBoard
    }
    
    static func divergenceLabel(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.divergenceLabel.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func loadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func moreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreCell? {
      return R.nib.moreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreCell
    }
    
    static func moreHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreHeader? {
      return R.nib.moreHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreHeader
    }
    
    static func numberPad(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.numberPad.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func optionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.optionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func recordCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecordCell? {
      return R.nib.recordCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecordCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BankCell`.
    static let bankCell: Rswift.ReuseIdentifier<BankCell> = Rswift.ReuseIdentifier(identifier: "BankCell")
    /// Reuse identifier `ConverterCell`.
    static let converterCell: Rswift.ReuseIdentifier<ConverterCell> = Rswift.ReuseIdentifier(identifier: "ConverterCell")
    /// Reuse identifier `MoreCell`.
    static let moreCell: Rswift.ReuseIdentifier<MoreCell> = Rswift.ReuseIdentifier(identifier: "MoreCell")
    /// Reuse identifier `RecordCell`.
    static let recordCell: Rswift.ReuseIdentifier<RecordCell> = Rswift.ReuseIdentifier(identifier: "RecordCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `BankCurrencyViewController`, and contains static references to 1 segues.
    struct bankCurrencyViewController {
      /// Segue identifier `HistoryCurrency`.
      static let historyCurrency: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BankCurrencyViewController, HistoryCurrencyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "HistoryCurrency")
      
      /// Optionally returns a typed version of segue `HistoryCurrency`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func historyCurrency(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BankCurrencyViewController, HistoryCurrencyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bankCurrencyViewController.historyCurrency, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CurrencyViewController`, and contains static references to 1 segues.
    struct currencyViewController {
      /// Segue identifier `TWBank`.
      static let twBank: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CurrencyViewController, TWBankViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TWBank")
      
      /// Optionally returns a typed version of segue `TWBank`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func twBank(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CurrencyViewController, TWBankViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.currencyViewController.twBank, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HistoryCurrencyViewController`, and contains static references to 1 segues.
    struct historyCurrencyViewController {
      /// Segue identifier `TWBank`.
      static let twBank: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryCurrencyViewController, TWBankViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TWBank")
      
      /// Optionally returns a typed version of segue `TWBank`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func twBank(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryCurrencyViewController, TWBankViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyCurrencyViewController.twBank, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ListMoreViewController`, and contains static references to 3 segues.
    struct listMoreViewController {
      /// Segue identifier `AboutMe`.
      static let aboutMe: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ListMoreViewController, AboutMeVC> = Rswift.StoryboardSegueIdentifier(identifier: "AboutMe")
      /// Segue identifier `Agreement`.
      static let agreement: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ListMoreViewController, AgreementVC> = Rswift.StoryboardSegueIdentifier(identifier: "Agreement")
      /// Segue identifier `SelectSetting`.
      static let selectSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ListMoreViewController, SelectSettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SelectSetting")
      
      /// Optionally returns a typed version of segue `AboutMe`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func aboutMe(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ListMoreViewController, AboutMeVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.listMoreViewController.aboutMe, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Agreement`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func agreement(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ListMoreViewController, AgreementVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.listMoreViewController.agreement, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SelectSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func selectSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ListMoreViewController, SelectSettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.listMoreViewController.selectSetting, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `BankCurrency`.
    static let bankCurrency = _R.storyboard.bankCurrency()
    /// Storyboard `ConvertCurrency`.
    static let convertCurrency = _R.storyboard.convertCurrency()
    /// Storyboard `Currency`.
    static let currency = _R.storyboard.currency()
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `More`.
    static let more = _R.storyboard.more()
    
    /// `UIStoryboard(name: "BankCurrency", bundle: ...)`
    static func bankCurrency(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bankCurrency)
    }
    
    /// `UIStoryboard(name: "ConvertCurrency", bundle: ...)`
    static func convertCurrency(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.convertCurrency)
    }
    
    /// `UIStoryboard(name: "Currency", bundle: ...)`
    static func currency(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.currency)
    }
    
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "More", bundle: ...)`
    static func more(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.more)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 6 localization tables.
  struct string {
    /// This `R.string.appiraterLocalizable` struct is generated, and contains static references to 5 localization keys.
    struct appiraterLocalizable {
      /// en translation: I don't like to
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rate_cancel_btn = Rswift.StringResource(key: "rate_cancel_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: I would like to rate later
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rate_later_btn = Rswift.StringResource(key: "rate_later_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: If you enjoy using ExchangeHelper, would you mind taking a moment to rate it? Thanks for your support
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rate_message = Rswift.StringResource(key: "rate_message", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Rate ExchangeHelper
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rate_title = Rswift.StringResource(key: "rate_title", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Rate Me
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rate_rate_btn = Rswift.StringResource(key: "rate_rate_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      
      /// en translation: I don't like to
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rate_cancel_btn(_: Void = ()) -> String {
        return NSLocalizedString("rate_cancel_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I would like to rate later
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rate_later_btn(_: Void = ()) -> String {
        return NSLocalizedString("rate_later_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If you enjoy using ExchangeHelper, would you mind taking a moment to rate it? Thanks for your support
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rate_message(_: Void = ()) -> String {
        return NSLocalizedString("rate_message", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate ExchangeHelper
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rate_title(_: Void = ()) -> String {
        return NSLocalizedString("rate_title", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate Me
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rate_rate_btn(_: Void = ()) -> String {
        return NSLocalizedString("rate_rate_btn", tableName: "AppiraterLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.error` struct is generated, and contains static references to 4 localization keys.
    struct error {
      /// en translation: An error occurred! Please try again or give us a feedback
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let unknown_error = Rswift.StringResource(key: "unknown_error", tableName: "Error", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Something wrong with server
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let fetch_remote_error = Rswift.StringResource(key: "fetch_remote_error", tableName: "Error", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Something wrong with your internet, please check your internet service
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let disconnect_error = Rswift.StringResource(key: "disconnect_error", tableName: "Error", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: There's no saved currency data
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let fetch_local_error = Rswift.StringResource(key: "fetch_local_error", tableName: "Error", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      
      /// en translation: An error occurred! Please try again or give us a feedback
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func unknown_error(_: Void = ()) -> String {
        return NSLocalizedString("unknown_error", tableName: "Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something wrong with server
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func fetch_remote_error(_: Void = ()) -> String {
        return NSLocalizedString("fetch_remote_error", tableName: "Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something wrong with your internet, please check your internet service
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func disconnect_error(_: Void = ()) -> String {
        return NSLocalizedString("disconnect_error", tableName: "Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There's no saved currency data
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func fetch_local_error(_: Void = ()) -> String {
        return NSLocalizedString("fetch_local_error", tableName: "Error", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.listCurrency` struct is generated, and contains static references to 63 localization keys.
    struct listCurrency {
      /// en translation: ANZ Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let anzbtwtP = Rswift.StringResource(key: "ANZBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: AUD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let aud = Rswift.StringResource(key: "aud", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Bank of Kaosiung
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let bkaotwtK = Rswift.StringResource(key: "BKAOTWTK", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Bank of Panhsin
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let bbbktwtP = Rswift.StringResource(key: "BBBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Bank of Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let bktwtwtP = Rswift.StringResource(key: "BKTWTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: CAD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cad = Rswift.StringResource(key: "cad", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: CHF
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let chf = Rswift.StringResource(key: "chf", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: CNH
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cnh = Rswift.StringResource(key: "cnh", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: CNY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cny = Rswift.StringResource(key: "cny", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Cathay United Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let uwcbtwtP = Rswift.StringResource(key: "UWCBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Chang-Hwa Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let ccbctwtP = Rswift.StringResource(key: "CCBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: China Trust
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let ctcbtwtP = Rswift.StringResource(key: "CTCBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Citi Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cititwtP = Rswift.StringResource(key: "CITITWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Cota Commercial Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cobktwtP = Rswift.StringResource(key: "COBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: DBS
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let dbsstwtP = Rswift.StringResource(key: "DBSSTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: DKK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let dkk = Rswift.StringResource(key: "dkk", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: E.Sun Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let esuntwtP = Rswift.StringResource(key: "ESUNTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: EUR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let eur = Rswift.StringResource(key: "eur", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Entie Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let entitwtP = Rswift.StringResource(key: "ENTITWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Far Eastern Int'l Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let feintwtP = Rswift.StringResource(key: "FEINTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: First Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let fcbktwtP = Rswift.StringResource(key: "FCBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Fuban Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let tpbktwtP = Rswift.StringResource(key: "TPBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: GBP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let gbp = Rswift.StringResource(key: "gbp", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Google
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let google = Rswift.StringResource(key: "google", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: HKD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let hkd = Rswift.StringResource(key: "hkd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: HSBC Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let hsbctwtP = Rswift.StringResource(key: "HSBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Hua-Nan Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let hnbktwtP = Rswift.StringResource(key: "HNBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: IDR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let idr = Rswift.StringResource(key: "idr", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: INR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let inr = Rswift.StringResource(key: "inr", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: JPY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let jpy = Rswift.StringResource(key: "jpy", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: JihSun Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let jsibtwtP = Rswift.StringResource(key: "JSIBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: KGI
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let csmbtwtP = Rswift.StringResource(key: "CSMBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: KRW
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let krw = Rswift.StringResource(key: "krw", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: King's Town Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let tnbbtwtN = Rswift.StringResource(key: "TNBBTWTN", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Land Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let lbottwtP = Rswift.StringResource(key: "LBOTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: MOP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mop = Rswift.StringResource(key: "mop", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: MXN
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mxn = Rswift.StringResource(key: "mxn", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: MYR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let myr = Rswift.StringResource(key: "myr", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Mega International Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let icbctwtP = Rswift.StringResource(key: "ICBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: NZD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let nzd = Rswift.StringResource(key: "nzd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: PHP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let php = Rswift.StringResource(key: "php", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: RTER API
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rter_api = Rswift.StringResource(key: "rter_api", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: SCSB
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let scsbtwtP = Rswift.StringResource(key: "SCSBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: SEK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let sek = Rswift.StringResource(key: "sek", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: SGD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let sgd = Rswift.StringResource(key: "sgd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Shin Kong Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mktbtwtP = Rswift.StringResource(key: "MKTBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Sinopac Bannk
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let sinotwtP = Rswift.StringResource(key: "SINOTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Standard Chartered
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let scbltwtP = Rswift.StringResource(key: "SCBLTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Sunny Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let sunytwtP = Rswift.StringResource(key: "SUNYTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: THB
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let thb = Rswift.StringResource(key: "thb", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: TRY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let `try` = Rswift.StringResource(key: "try", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: TWD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let twd = Rswift.StringResource(key: "twd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Tai Shin Int'l Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let tsibtwtP = Rswift.StringResource(key: "TSIBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Taichung Commercial Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let tcbbtwtH = Rswift.StringResource(key: "TCBBTWTH", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: TaipeiStar Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let botptwtP = Rswift.StringResource(key: "BOTPTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Taiwan Business Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mbbttwtP = Rswift.StringResource(key: "MBBTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Taiwan Cooperative Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let tacbtwtP = Rswift.StringResource(key: "TACBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: USD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let usd = Rswift.StringResource(key: "usd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Union Bank of Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let ubottwtP = Rswift.StringResource(key: "UBOTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: VND
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let vnd = Rswift.StringResource(key: "vnd", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Yahoo
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let yahoo = Rswift.StringResource(key: "yahoo", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: YuanTa Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let apbktwtH = Rswift.StringResource(key: "APBKTWTH", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: ZAR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let zar = Rswift.StringResource(key: "zar", tableName: "ListCurrency", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      
      /// en translation: ANZ Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func anzbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("ANZBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: AUD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func aud(_: Void = ()) -> String {
        return NSLocalizedString("aud", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bank of Kaosiung
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func bkaotwtK(_: Void = ()) -> String {
        return NSLocalizedString("BKAOTWTK", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bank of Panhsin
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func bbbktwtP(_: Void = ()) -> String {
        return NSLocalizedString("BBBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bank of Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func bktwtwtP(_: Void = ()) -> String {
        return NSLocalizedString("BKTWTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CAD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cad(_: Void = ()) -> String {
        return NSLocalizedString("cad", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CHF
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func chf(_: Void = ()) -> String {
        return NSLocalizedString("chf", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CNH
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cnh(_: Void = ()) -> String {
        return NSLocalizedString("cnh", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CNY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cny(_: Void = ()) -> String {
        return NSLocalizedString("cny", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cathay United Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func uwcbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("UWCBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chang-Hwa Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func ccbctwtP(_: Void = ()) -> String {
        return NSLocalizedString("CCBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: China Trust
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func ctcbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("CTCBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Citi Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cititwtP(_: Void = ()) -> String {
        return NSLocalizedString("CITITWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cota Commercial Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cobktwtP(_: Void = ()) -> String {
        return NSLocalizedString("COBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DBS
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func dbsstwtP(_: Void = ()) -> String {
        return NSLocalizedString("DBSSTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DKK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func dkk(_: Void = ()) -> String {
        return NSLocalizedString("dkk", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: E.Sun Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func esuntwtP(_: Void = ()) -> String {
        return NSLocalizedString("ESUNTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: EUR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func eur(_: Void = ()) -> String {
        return NSLocalizedString("eur", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Entie Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func entitwtP(_: Void = ()) -> String {
        return NSLocalizedString("ENTITWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Far Eastern Int'l Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func feintwtP(_: Void = ()) -> String {
        return NSLocalizedString("FEINTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: First Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func fcbktwtP(_: Void = ()) -> String {
        return NSLocalizedString("FCBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fuban Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func tpbktwtP(_: Void = ()) -> String {
        return NSLocalizedString("TPBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GBP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func gbp(_: Void = ()) -> String {
        return NSLocalizedString("gbp", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Google
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func google(_: Void = ()) -> String {
        return NSLocalizedString("google", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HKD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func hkd(_: Void = ()) -> String {
        return NSLocalizedString("hkd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HSBC Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func hsbctwtP(_: Void = ()) -> String {
        return NSLocalizedString("HSBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hua-Nan Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func hnbktwtP(_: Void = ()) -> String {
        return NSLocalizedString("HNBKTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: IDR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func idr(_: Void = ()) -> String {
        return NSLocalizedString("idr", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: INR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func inr(_: Void = ()) -> String {
        return NSLocalizedString("inr", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: JPY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func jpy(_: Void = ()) -> String {
        return NSLocalizedString("jpy", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: JihSun Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func jsibtwtP(_: Void = ()) -> String {
        return NSLocalizedString("JSIBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: KGI
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func csmbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("CSMBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: KRW
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func krw(_: Void = ()) -> String {
        return NSLocalizedString("krw", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: King's Town Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func tnbbtwtN(_: Void = ()) -> String {
        return NSLocalizedString("TNBBTWTN", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Land Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func lbottwtP(_: Void = ()) -> String {
        return NSLocalizedString("LBOTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MOP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mop(_: Void = ()) -> String {
        return NSLocalizedString("mop", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MXN
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mxn(_: Void = ()) -> String {
        return NSLocalizedString("mxn", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MYR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func myr(_: Void = ()) -> String {
        return NSLocalizedString("myr", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mega International Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func icbctwtP(_: Void = ()) -> String {
        return NSLocalizedString("ICBCTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NZD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func nzd(_: Void = ()) -> String {
        return NSLocalizedString("nzd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PHP
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func php(_: Void = ()) -> String {
        return NSLocalizedString("php", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RTER API
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rter_api(_: Void = ()) -> String {
        return NSLocalizedString("rter_api", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SCSB
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func scsbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("SCSBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SEK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func sek(_: Void = ()) -> String {
        return NSLocalizedString("sek", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SGD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func sgd(_: Void = ()) -> String {
        return NSLocalizedString("sgd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Shin Kong Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mktbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("MKTBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sinopac Bannk
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func sinotwtP(_: Void = ()) -> String {
        return NSLocalizedString("SINOTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Standard Chartered
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func scbltwtP(_: Void = ()) -> String {
        return NSLocalizedString("SCBLTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sunny Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func sunytwtP(_: Void = ()) -> String {
        return NSLocalizedString("SUNYTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: THB
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func thb(_: Void = ()) -> String {
        return NSLocalizedString("thb", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRY
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func `try`(_: Void = ()) -> String {
        return NSLocalizedString("try", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TWD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func twd(_: Void = ()) -> String {
        return NSLocalizedString("twd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tai Shin Int'l Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func tsibtwtP(_: Void = ()) -> String {
        return NSLocalizedString("TSIBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Taichung Commercial Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func tcbbtwtH(_: Void = ()) -> String {
        return NSLocalizedString("TCBBTWTH", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TaipeiStar Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func botptwtP(_: Void = ()) -> String {
        return NSLocalizedString("BOTPTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Taiwan Business Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mbbttwtP(_: Void = ()) -> String {
        return NSLocalizedString("MBBTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Taiwan Cooperative Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func tacbtwtP(_: Void = ()) -> String {
        return NSLocalizedString("TACBTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: USD
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func usd(_: Void = ()) -> String {
        return NSLocalizedString("usd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Union Bank of Taiwan
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func ubottwtP(_: Void = ()) -> String {
        return NSLocalizedString("UBOTTWTP", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VND
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func vnd(_: Void = ()) -> String {
        return NSLocalizedString("vnd", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yahoo
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func yahoo(_: Void = ()) -> String {
        return NSLocalizedString("yahoo", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: YuanTa Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func apbktwtH(_: Void = ()) -> String {
        return NSLocalizedString("APBKTWTH", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ZAR
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func zar(_: Void = ()) -> String {
        return NSLocalizedString("zar", tableName: "ListCurrency", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.listLanguage` struct is generated, and contains static references to 3 localization keys.
    struct listLanguage {
      /// zh-Hans translation: 简体中文
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static let zhHans = Rswift.StringResource(key: "zh-Hans", tableName: "ListLanguage", bundle: R.hostingBundle, locales: ["zh-Hans", "en", "zh-Hant"], comment: nil)
      /// zh-Hans translation: 繁体中文
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static let zhHant = Rswift.StringResource(key: "zh-Hant", tableName: "ListLanguage", bundle: R.hostingBundle, locales: ["zh-Hans", "en", "zh-Hant"], comment: nil)
      /// zh-Hans translation: 英文版
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static let en = Rswift.StringResource(key: "en", tableName: "ListLanguage", bundle: R.hostingBundle, locales: ["zh-Hans", "en", "zh-Hant"], comment: nil)
      
      /// zh-Hans translation: 简体中文
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static func zhHans(_: Void = ()) -> String {
        return NSLocalizedString("zh-Hans", tableName: "ListLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 繁体中文
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static func zhHant(_: Void = ()) -> String {
        return NSLocalizedString("zh-Hant", tableName: "ListLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 英文版
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static func en(_: Void = ()) -> String {
        return NSLocalizedString("en", tableName: "ListLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.listSettings` struct is generated, and contains static references to 13 localization keys.
    struct listSettings {
      /// en translation: About
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let aboutme = Rswift.StringResource(key: "aboutme", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Agreement
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let agreement = Rswift.StringResource(key: "agreement", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Currency Unit
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let default_unit_currency = Rswift.StringResource(key: "default_unit_currency", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Decimal Point
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let decimal_point = Rswift.StringResource(key: "decimal_point", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Favorite Currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let default_currency = Rswift.StringResource(key: "default_currency", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Favorite Source
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let default_source = Rswift.StringResource(key: "default_source", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Feed back
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let feedback = Rswift.StringResource(key: "feedback", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: History Trend
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let default_period = Rswift.StringResource(key: "default_period", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let language = Rswift.StringResource(key: "language", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Oh no! Something wrong with mail delivery 😰
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mail_failed = Rswift.StringResource(key: "mail_failed", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Rate Us
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let rating = Rswift.StringResource(key: "rating", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Thanks for your feed back 😚
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let mail_sent = Rswift.StringResource(key: "mail_sent", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let version = Rswift.StringResource(key: "version", tableName: "ListSettings", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      
      /// en translation: About
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func aboutme(_: Void = ()) -> String {
        return NSLocalizedString("aboutme", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Agreement
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func agreement(_: Void = ()) -> String {
        return NSLocalizedString("agreement", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency Unit
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func default_unit_currency(_: Void = ()) -> String {
        return NSLocalizedString("default_unit_currency", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Decimal Point
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func decimal_point(_: Void = ()) -> String {
        return NSLocalizedString("decimal_point", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorite Currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func default_currency(_: Void = ()) -> String {
        return NSLocalizedString("default_currency", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorite Source
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func default_source(_: Void = ()) -> String {
        return NSLocalizedString("default_source", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feed back
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func feedback(_: Void = ()) -> String {
        return NSLocalizedString("feedback", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History Trend
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func default_period(_: Void = ()) -> String {
        return NSLocalizedString("default_period", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func language(_: Void = ()) -> String {
        return NSLocalizedString("language", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oh no! Something wrong with mail delivery 😰
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mail_failed(_: Void = ()) -> String {
        return NSLocalizedString("mail_failed", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate Us
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func rating(_: Void = ()) -> String {
        return NSLocalizedString("rating", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thanks for your feed back 😚
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func mail_sent(_: Void = ()) -> String {
        return NSLocalizedString("mail_sent", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func version(_: Void = ()) -> String {
        return NSLocalizedString("version", tableName: "ListSettings", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.uI` struct is generated, and contains static references to 31 localization keys.
    struct uI {
      /// en translation: Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let bank = Rswift.StringResource(key: "bank", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let bank_currency_title = Rswift.StringResource(key: "bank_currency_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let buy = Rswift.StringResource(key: "buy", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Calculator
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let calculator_title = Rswift.StringResource(key: "calculator_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Cash
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let cash = Rswift.StringResource(key: "cash", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Change To
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let change = Rswift.StringResource(key: "change", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Chart
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let chart = Rswift.StringResource(key: "chart", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let currency_title = Rswift.StringResource(key: "currency_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Currency does not guarantee the accuracy, authenticity, timeliness, reliability, appropriateness, correct sequencing, or completeness of any of the Information And Content. You agree that all risk associated with the use of, or reliance on, any of the information And Content accessed through the Services rests with you. You further agree that Currency shall not be responsible or liable, directly or indirectly, in any way for any loss or damage of any kind incurred as a result of, or in connection with you use of, or reliance on, any of the Information And Content.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let agreement_detail = Rswift.StringResource(key: "agreement_detail", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Currency does not guarantee the accuracy, authenticity, timeliness, reliability, appropriateness, correct sequencing, or completeness of any of the Information And Content. You agree that all risk associated with the use of, or reliance on, any of the information And Content accessed through the Services rests with you. You further agree that Currency shall not be responsible or liable, directly or indirectly, in any way for any loss or damage of any kind incurred as a result of, or in connection with you use of, or reliance on, any of the Information And Content.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let announcement = Rswift.StringResource(key: "announcement", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let done = Rswift.StringResource(key: "done", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let edit = Rswift.StringResource(key: "edit", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: From 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let source_from = Rswift.StringResource(key: "source_from", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: I know
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let i_know = Rswift.StringResource(key: "i_know", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Last Update
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let update_time = Rswift.StringResource(key: "update_time", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Last update: 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let last_update_colon = Rswift.StringResource(key: "last_update_colon", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let more_title = Rswift.StringResource(key: "more_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: No Data
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let no_data = Rswift.StringResource(key: "no_data", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: No such data of 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let switchExchangeError = Rswift.StringResource(key: "switchExchangeError", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Others
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let others_title = Rswift.StringResource(key: "others_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Pay Attention !
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let warning = Rswift.StringResource(key: "warning", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Please select a currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let missing_selected_currency = Rswift.StringResource(key: "missing_selected_currency", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Please select a source
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let missing_selected_source = Rswift.StringResource(key: "missing_selected_source", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Provide rates' information, could compare multiple rates at the same time.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let aboutme_detail = Rswift.StringResource(key: "aboutme_detail", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let reload = Rswift.StringResource(key: "reload", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let sell = Rswift.StringResource(key: "sell", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let settings_title = Rswift.StringResource(key: "settings_title", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: Stock
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let stock = Rswift.StringResource(key: "stock", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      /// en translation: currency calculator provides a convenience way see all the currency at once。
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static let calculator_instruction = Rswift.StringResource(key: "calculator_instruction", tableName: "UI", bundle: R.hostingBundle, locales: ["en", "zh-Hant", "zh-Hans"], comment: nil)
      
      /// en translation: Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func bank(_: Void = ()) -> String {
        return NSLocalizedString("bank", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bank
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func bank_currency_title(_: Void = ()) -> String {
        return NSLocalizedString("bank_currency_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func buy(_: Void = ()) -> String {
        return NSLocalizedString("buy", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Calculator
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func calculator_title(_: Void = ()) -> String {
        return NSLocalizedString("calculator_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cash
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func cash(_: Void = ()) -> String {
        return NSLocalizedString("cash", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change To
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func change(_: Void = ()) -> String {
        return NSLocalizedString("change", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chart
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func chart(_: Void = ()) -> String {
        return NSLocalizedString("chart", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func currency_title(_: Void = ()) -> String {
        return NSLocalizedString("currency_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency does not guarantee the accuracy, authenticity, timeliness, reliability, appropriateness, correct sequencing, or completeness of any of the Information And Content. You agree that all risk associated with the use of, or reliance on, any of the information And Content accessed through the Services rests with you. You further agree that Currency shall not be responsible or liable, directly or indirectly, in any way for any loss or damage of any kind incurred as a result of, or in connection with you use of, or reliance on, any of the Information And Content.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func agreement_detail(_: Void = ()) -> String {
        return NSLocalizedString("agreement_detail", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency does not guarantee the accuracy, authenticity, timeliness, reliability, appropriateness, correct sequencing, or completeness of any of the Information And Content. You agree that all risk associated with the use of, or reliance on, any of the information And Content accessed through the Services rests with you. You further agree that Currency shall not be responsible or liable, directly or indirectly, in any way for any loss or damage of any kind incurred as a result of, or in connection with you use of, or reliance on, any of the Information And Content.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func announcement(_: Void = ()) -> String {
        return NSLocalizedString("announcement", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("edit", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func source_from(_: Void = ()) -> String {
        return NSLocalizedString("source_from", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I know
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func i_know(_: Void = ()) -> String {
        return NSLocalizedString("i_know", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last Update
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func update_time(_: Void = ()) -> String {
        return NSLocalizedString("update_time", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last update: 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func last_update_colon(_: Void = ()) -> String {
        return NSLocalizedString("last_update_colon", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func more_title(_: Void = ()) -> String {
        return NSLocalizedString("more_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Data
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func no_data(_: Void = ()) -> String {
        return NSLocalizedString("no_data", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No such data of 
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func switchExchangeError(_: Void = ()) -> String {
        return NSLocalizedString("switchExchangeError", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func confirm(_: Void = ()) -> String {
        return NSLocalizedString("confirm", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Others
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func others_title(_: Void = ()) -> String {
        return NSLocalizedString("others_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pay Attention !
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func warning(_: Void = ()) -> String {
        return NSLocalizedString("warning", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please select a currency
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func missing_selected_currency(_: Void = ()) -> String {
        return NSLocalizedString("missing_selected_currency", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please select a source
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func missing_selected_source(_: Void = ()) -> String {
        return NSLocalizedString("missing_selected_source", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Provide rates' information, could compare multiple rates at the same time.
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func aboutme_detail(_: Void = ()) -> String {
        return NSLocalizedString("aboutme_detail", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func reload(_: Void = ()) -> String {
        return NSLocalizedString("reload", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func sell(_: Void = ()) -> String {
        return NSLocalizedString("sell", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func settings_title(_: Void = ()) -> String {
        return NSLocalizedString("settings_title", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stock
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func stock(_: Void = ()) -> String {
        return NSLocalizedString("stock", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: currency calculator provides a convenience way see all the currency at once。
      /// 
      /// Locales: en, zh-Hant, zh-Hans
      static func calculator_instruction(_: Void = ()) -> String {
        return NSLocalizedString("calculator_instruction", tableName: "UI", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BankCell.validate()
      try _CurrencyCell.validate()
      try _DashBoard.validate()
      try _DivergenceLabel.validate()
    }
    
    struct _AdView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AdView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AnnouncementView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AnnouncementView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _BankCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BankCell
      
      let bundle = R.hostingBundle
      let identifier = "BankCell"
      let name = "BankCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "crown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'crown' is used in nib 'BankCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'picture' is used in nib 'BankCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BankHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BankHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankHeader
      }
      
      fileprivate init() {}
    }
    
    struct _ConverterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ConverterCell
      
      let bundle = R.hostingBundle
      let identifier = "ConverterCell"
      let name = "ConverterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterCell
      }
      
      fileprivate init() {}
    }
    
    struct _ConverterHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConverterHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterHeader
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CurrencyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'picture' is used in nib 'CurrencyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _DashBoard: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DashBoard"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DashBoard? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashBoard
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "change", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'change' is used in nib 'DashBoard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _DivergenceLabel: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DivergenceLabel"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrow_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_up' is used in nib 'DivergenceLabel', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MoreCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MoreCell
      
      let bundle = R.hostingBundle
      let identifier = "MoreCell"
      let name = "MoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreCell
      }
      
      fileprivate init() {}
    }
    
    struct _MoreHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MoreHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoreHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreHeader
      }
      
      fileprivate init() {}
    }
    
    struct _NumberPad: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NumberPad"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OptionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OptionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RecordCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RecordCell
      
      let bundle = R.hostingBundle
      let identifier = "RecordCell"
      let name = "RecordCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecordCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecordCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try bankCurrency.validate()
      try convertCurrency.validate()
      try currency.validate()
      try launchScreen.validate()
      try main.validate()
      try more.validate()
    }
    
    struct bankCurrency: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bankCurrencyViewController = StoryboardViewControllerResource<BankCurrencyViewController>(identifier: "BankCurrencyViewController")
      let bundle = R.hostingBundle
      let chartViewController = StoryboardViewControllerResource<ChartViewController>(identifier: "ChartViewController")
      let historyCurrencyViewController = StoryboardViewControllerResource<HistoryCurrencyViewController>(identifier: "HistoryCurrencyViewController")
      let name = "BankCurrency"
      
      func bankCurrencyViewController(_: Void = ()) -> BankCurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bankCurrencyViewController)
      }
      
      func chartViewController(_: Void = ()) -> ChartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chartViewController)
      }
      
      func historyCurrencyViewController(_: Void = ()) -> HistoryCurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyCurrencyViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.bankCurrency().bankCurrencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bankCurrencyViewController' could not be loaded from storyboard 'BankCurrency' as 'BankCurrencyViewController'.") }
        if _R.storyboard.bankCurrency().chartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chartViewController' could not be loaded from storyboard 'BankCurrency' as 'ChartViewController'.") }
        if _R.storyboard.bankCurrency().historyCurrencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyCurrencyViewController' could not be loaded from storyboard 'BankCurrency' as 'HistoryCurrencyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct convertCurrency: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let convertCurrencyViewController = StoryboardViewControllerResource<ConvertCurrencyViewController>(identifier: "ConvertCurrencyViewController")
      let editConvertCurrencyViewController = StoryboardViewControllerResource<EditConvertCurrencyViewController>(identifier: "EditConvertCurrencyViewController")
      let name = "ConvertCurrency"
      
      func convertCurrencyViewController(_: Void = ()) -> ConvertCurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: convertCurrencyViewController)
      }
      
      func editConvertCurrencyViewController(_: Void = ()) -> EditConvertCurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editConvertCurrencyViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.convertCurrency().convertCurrencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'convertCurrencyViewController' could not be loaded from storyboard 'ConvertCurrency' as 'ConvertCurrencyViewController'.") }
        if _R.storyboard.convertCurrency().editConvertCurrencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editConvertCurrencyViewController' could not be loaded from storyboard 'ConvertCurrency' as 'EditConvertCurrencyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct currency: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let currencyViewController = StoryboardViewControllerResource<CurrencyViewController>(identifier: "CurrencyViewController")
      let name = "Currency"
      let twBankViewController = StoryboardViewControllerResource<TWBankViewController>(identifier: "TWBankViewController")
      
      func currencyViewController(_: Void = ()) -> CurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currencyViewController)
      }
      
      func twBankViewController(_: Void = ()) -> TWBankViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: twBankViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.currency().currencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currencyViewController' could not be loaded from storyboard 'Currency' as 'CurrencyViewController'.") }
        if _R.storyboard.currency().twBankViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'twBankViewController' could not be loaded from storyboard 'Currency' as 'TWBankViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Launch Screen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HostTabBarController
      
      let bundle = R.hostingBundle
      let hostTabBarController = StoryboardViewControllerResource<HostTabBarController>(identifier: "HostTabBarController")
      let name = "Main"
      
      func hostTabBarController(_: Void = ()) -> HostTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hostTabBarController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().hostTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hostTabBarController' could not be loaded from storyboard 'Main' as 'HostTabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct more: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let aboutMeVC = StoryboardViewControllerResource<AboutMeVC>(identifier: "AboutMeVC")
      let agreementVC = StoryboardViewControllerResource<AgreementVC>(identifier: "AgreementVC")
      let bundle = R.hostingBundle
      let listMoreViewController = StoryboardViewControllerResource<ListMoreViewController>(identifier: "ListMoreViewController")
      let name = "More"
      let selectSettingViewController = StoryboardViewControllerResource<SelectSettingViewController>(identifier: "SelectSettingViewController")
      
      func aboutMeVC(_: Void = ()) -> AboutMeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutMeVC)
      }
      
      func agreementVC(_: Void = ()) -> AgreementVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agreementVC)
      }
      
      func listMoreViewController(_: Void = ()) -> ListMoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listMoreViewController)
      }
      
      func selectSettingViewController(_: Void = ()) -> SelectSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectSettingViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.more().aboutMeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutMeVC' could not be loaded from storyboard 'More' as 'AboutMeVC'.") }
        if _R.storyboard.more().agreementVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agreementVC' could not be loaded from storyboard 'More' as 'AgreementVC'.") }
        if _R.storyboard.more().listMoreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listMoreViewController' could not be loaded from storyboard 'More' as 'ListMoreViewController'.") }
        if _R.storyboard.more().selectSettingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectSettingViewController' could not be loaded from storyboard 'More' as 'SelectSettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

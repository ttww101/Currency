//
//  ConvertCurrencyWorker.swift
//  CURRENCY
//
//  Created by Stan Liu on 29/01/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class CalculatorWorker {
  func calculate(usd: String,
                 subject: String,
                 content: String,
                 currencies: [String]) -> [String] {

    guard subject != "nan" else {
      return currencies.map { _ in
        return "0"
      }
    }
    // Subject Convert to USD
    let subjectUSDRate = subject.decimalNumber / usd.decimalNumber
    let subjectConvertedUSD = subjectUSDRate * content.decimalNumber

    // Currencies Convert to USD
    let currenciesFromUSD = currencies.map {
      usd.decimalNumber / $0.decimalNumber
    }
    // Currencies from usd calculate with subject form usd
    return currenciesFromUSD.map { (currencyFromUSD) -> String in
      let result = (currencyFromUSD * subjectConvertedUSD).stringValue
      return result
    }
  }
}

class ConvertCurrencyWorker {

  func loadLocalSource(source: Source) throws -> CurrencySource {
    guard let currencySource = DataManager().loadAll(source: source) else {
      throw LoadDataError.empty
    }
    return currencySource
  }

  func fetchRemote(source: Source,
                   completion: @escaping (RterBank<[RterCurrency]>?, Error?) -> Void) {
    API().currenciesOfBank(source: source) { (bank, error) in
      completion(bank, error)
    }
  }

  func fetchRemoteSource(source: Source,
                         completion: @escaping (CurrencySource?, Error?) -> Void) {
    API().getBankOfTaiwanAllToday { (currencySource, error) in
      guard let currencySource = currencySource else {
        completion(nil, error)
        return
      }
      completion(CurrencySource(name: source.name,
                                currencies: currencySource.currencies), nil)
    }
  }

//  func calculate(source: Source,
//                 usd: InvestmentSubject?,
//                 currencies: [InvestmentSubject],
//                 request: ConvertCurrency.UpdateCell.Request) -> [String] {
//    guard let usd = usd else { return [] }
//    switch source {
//    case .bot:
//      return calculateBOT(usd: usd,
//                          currencies: currencies,
//                          request: request)
//    default:
//      return []
//    }
//  }
//
//  private func calculateBOT(usd: InvestmentSubject,
//                            currencies: [InvestmentSubject],
//                            request: ConvertCurrency.UpdateCell.Request) -> [String] {
//    let usdExchange = request.exchangeType.exchanges(investmentSubject: usd)
//    guard let usdRate = request.tradeType.trade(trade: usdExchange).last else {
//      return []
//    }
//    let latestCurrenciesRate = currencies.map { (object) -> String in
//      let exchange = request.exchangeType.exchanges(investmentSubject: object)
//      let rates = request.tradeType.trade(trade: exchange)
//      return rates.last ?? "nan"
//    }
//    // Convert to USD
//    let subjectUSDRate = request.subjectRate.decimalNumber / usdRate.decimalNumber
//    let subjectConvertedUSD = subjectUSDRate * request.content.decimalNumber
//
//    // USD convert to result
//    let ratesFromUSD = latestCurrenciesRate.map { (rate) -> Decimal in
//      return usdRate.decimalNumber / rate.decimalNumber
//    }
//    return ratesFromUSD.map {
//      let result = ($0 * subjectConvertedUSD).stringValue
//      return result.userSettingDecimal
//    }
//  }

  //  func getStandardUSDRate(usd: InvestmentSubject?,
  //                          request: ConvertCurrency.UpdateCell.Request) -> String? {
  //    // retrieve USD rate
  //    guard let usd = usd else {
  //      return nil
  //    }
  //    guard let usdExchange = request.exchangeType == .cash ? usd.cash.rates.last : usd.stock.rates.last else {
  //      return nil
  //    }
  //    let usdRate = request.tradeType == .buy ? usdExchange.buy : usdExchange.sell
  //    return usdRate
  //  }
  //
  //  func calculateRatesBasedOn(usd: String,
  //                             currencies: [InvestmentSubject],
  //                             request: ConvertCurrency.UpdateCell.Request) -> [String] {
  //    let exchanges = currencies.map { return request.exchangeType == .cash ? $0.cash : $0.stock
  //    }
  //    // Calculate every rate base on USD
  //    let rates: [String] = exchanges.map {
  //      guard let lastRate = $0.rates.last else {
  //        return "0"
  //      }
  //      let target = request.tradeType == .buy ? lastRate.buy : lastRate.sell
  //      return (usd.decimalNumber / target.decimalNumber).stringValue
  //    }
  //    return rates
  //  }
  //
  //  /// Calculate currency subject rate BY USD!, AlWAYS use USD
  //  func calculate(request: ConvertCurrency.UpdateCell.Request,
  //                 usd: String,
  //                 withRates rates: [String]) -> [String] {
  //    return rates.map {
  //      //
  //      print("subject rate: \(request.subjectRate)")
  //      print("content: \(request.content)")
  //      let convertedToUSD = request.content.decimalNumber / usd.decimalNumber
  //      print("convertedToUSD :\(convertedToUSD)")
  //      print("target: \($0)")
  //      //
  //      return (convertedToUSD * $0.decimalNumber).stringValue
  //    }
  //  }
}

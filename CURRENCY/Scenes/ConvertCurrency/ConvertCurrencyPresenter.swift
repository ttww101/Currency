//
//  ConvertCurrencyPresenter.swift
//  CURRENCY
//
//  Created by Stan Liu on 29/01/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConvertCurrencyPresentationLogic {
  func presentFetchedCurrencies(response: ConvertCurrency.Fetch.Response)
  func presentSwitchChange(response: ConvertCurrency.Get.Response)
  func presentError(response: Base.HandleError.Response)
  func presentEdited(response: ConvertCurrency.Edit.Response)
  func presentUpdateCellTextField(response: ConvertCurrency.Calculate.Response)
  func presentUpdateCellPlaceHolder(response: ConvertCurrency.Calculate.Response)
}

class ConvertCurrencyPresenter: ConvertCurrencyPresentationLogic {
  weak var viewController: ConvertCurrencyDisplayLogic?

  // MARK: Present Fetched Data

  func presentFetchedCurrencies(response: ConvertCurrency.Fetch.Response) {
    let displayCurrencies = response.currencies.map {
      return ConvertCurrency.Fetch.ViewModel.DisplayCurrency(name: $0.name,
                                                             buy: $0.buy,
                                                             sell: $0.sell,
                                                             lastUpdate: $0.lastUpdate)
    }
    let viewModel = ConvertCurrency.Fetch.ViewModel(exchangeType: response.exchangeType,
                                                    displayCurrency: displayCurrencies)
    viewController?.displayFetchedCurrencies(viewModel: viewModel)
  }

  func presentSwitchChange(response: ConvertCurrency.Get.Response) {
    let displayCurrencies = response.currencies.map {
      return ConvertCurrency.Fetch.ViewModel.DisplayCurrency(name: $0.name,
                                                             buy: $0.buy,
                                                             sell: $0.sell,
                                                             lastUpdate: $0.lastUpdate)
    }
    let viewModel = ConvertCurrency.Get.ViewModel(displayCurrencies: displayCurrencies)
    viewController?.displaySwitchChange(viewModel: viewModel)
  }

  func presentEdited(response: ConvertCurrency.Edit.Response) {
    let displayEditedCurrencies = response.currencies.map {
      return ConvertCurrency.Fetch.ViewModel.DisplayCurrency(name: $0.name,
                                                             buy: $0.buy,
                                                             sell: $0.sell,
                                                             lastUpdate: $0.lastUpdate)
    }
    let viewModel = ConvertCurrency.Edit.ViewModel(displayEditedCurrencies: displayEditedCurrencies)
    viewController?.displayEdited(viewModel: viewModel)
  }
  //  func presentFetchedData(response: ConvertCurrency.FetchCurrency.Response) {
  //    // convert InvestmentSubject to DisplayFavoriteCurrency
  //    let displayFavoriteCurrencies = response.currencies.map { (currency) -> ConvertCurrency.FetchCurrency.ViewModel.DisplayFavoriteCurrency in
  //      let emptyRate = Rate(date: "", amount: "")
  //      let cash = currency.cash.first ?? Trade(buy: emptyRate, sell: emptyRate)
  //      let stock = currency.stock.first ?? Trade(buy: emptyRate, sell: emptyRate)
  //
  //      // NO NEED to convert to localized, because always pass key for functions of display
  //      return ConvertCurrency.FetchCurrency.ViewModel.DisplayFavoriteCurrency(name: currency.name,
  //                                                                          date: currency.lastUpdate.timeStringValue,
  //                                                                          cash: cash,
  //                                                                          stock: stock)
  //    }
  //    let viewModel = ConvertCurrency.FetchCurrency.ViewModel(displayFavoriteCurrencies: displayFavoriteCurrencies)
  //    viewController?.displayFetchedData(viewModel: viewModel)
  //  }

  func presentError(response: Base.HandleError.Response) {
    let viewModel = Base.HandleError.ViewModel(error: response.error)
    viewController?.displayError(viewModel: viewModel)
  }

  func presentUpdateCellTextField(response: ConvertCurrency.Calculate.Response) {
    let viewModel = ConvertCurrency.Calculate.ViewModel(results: response.results)
    viewController?.displayCellTextFeild(viewModel: viewModel)
  }

  func presentUpdateCellPlaceHolder(response: ConvertCurrency.Calculate.Response) {
    let viewModel = ConvertCurrency.Calculate.ViewModel(results: response.results)
    viewController?.displayCellPlaceHolder(viewModel: viewModel)
  }
}

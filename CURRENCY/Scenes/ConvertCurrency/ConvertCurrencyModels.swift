//
//  ConvertCurrencyModels.swift
//  CURRENCY
//
//  Created by Stan Liu on 29/01/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

func == (lhs: ConvertCurrency.Currency, rhs: ConvertCurrency.Currency) -> Bool {
  return lhs.name == rhs.name
}

extension Array where Element: CurrencyBasic {
  func containsSameElements(as other: [Element]) -> Bool {
    let diff = DS().diff(self, other, compare: { $0.name == $1.name })
    return self.count == other.count
      && diff.common.count == self.count
      && diff.inserted.count == 0
      && diff.removed.count == 0
  }
}

enum ConvertCurrency {
  // MARK: Use cases

  struct Bank: BankBasic {
    var name: String
    var swiftCode: String
    var stock: [Currency]
    var cash: [Currency]
  }
  struct Currency: CurrencyBasic, CarryLastUpdate, Equatable {
    var name: String
    var buy: String
    var sell: String
    var lastUpdate: String
  }

  enum Fetch {
    struct Request {
      var source: Source
    }
    struct Response {
      var exchangeType: ExchangeType
      var currencies: [Currency]
    }
    struct ViewModel {
      struct DisplayCurrency: CurrencyBasic, CarryLastUpdate {
        var name: String
        var buy: String
        var sell: String
        var lastUpdate: String
      }
      var exchangeType: ExchangeType
      var displayCurrency: [DisplayCurrency]
    }
  }

  enum Get {
    struct Request {
      var exchangeType: ExchangeType
      var tradeType: TradeType
    }
    struct Response {
      var currencies: [Currency]
    }
    struct ViewModel {
      var displayCurrencies: [Fetch.ViewModel.DisplayCurrency]
    }
  }

  enum FetchError {
    struct Request { }
    struct Response {
      var error: FetchDataError
    }
    struct ViewModel {
      var error: FetchDataError
    }
  }

  enum Calculate {
    struct Request {
      var tradeType: TradeType
      var exchangeType: ExchangeType
      var subjectRate: String
      var content: String
    }
    struct Response {
      var results: [String]
    }
    struct ViewModel {
      var results: [String]
    }
  }

  enum Edit {
    struct Request {
      var exchangeType: ExchangeType
    }
    struct Response {
      var currencies: [Currency]
    }
    struct ViewModel {
      var displayEditedCurrencies: [Fetch.ViewModel.DisplayCurrency]
    }
  }
}

//
//  ConvertCurrencyInteractor.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 29/01/2018.
//  Copyright (c) 2018 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConvertCurrencyBusinessLogic {
  /// Fetch data from source like BOT, google
  func fetchCurrencies(request: ConvertCurrency.Fetch.Request)
  func switchChange(request: ConvertCurrency.Get.Request)
  //func fetchLocal(request: ConvertCurrency.FetchCurrency.Request)

  func reloadEditedFavorite(request: ConvertCurrency.Edit.Request)
  /// Use the fetched data
  func updateCellTextField(request: ConvertCurrency.Calculate.Request)
  func updateCellPlaceHolder(request: ConvertCurrency.Calculate.Request)
}

protocol ConvertCurrencyDataStore {
  /// Realy-only
  var favoriteCurrencyNameList: [String] { get set }
}

class ConvertCurrencyInteractor: ConvertCurrencyBusinessLogic, ConvertCurrencyDataStore {
  var presenter: ConvertCurrencyPresentationLogic?
  var worker: ConvertCurrencyWorker = ConvertCurrencyWorker()

  /// For favorite currencies, give it a initial favorite currencies list
  /// Get, Set
  var favoriteCurrencyNameList: [String] = KKUserSetting.favoriteCurrencies() {
    didSet {
      favoriteCurrencyList = favoriteCurrencyNameList.map {
        return ConvertCurrency.Currency(name: $0, buy: "nan", sell: "nan", lastUpdate: "")
      }
    }
  }
  var favoriteCurrencyList: [ConvertCurrency.Currency] = KKUserSetting.favoriteCurrencies().map {
    return ConvertCurrency.Currency(name: $0, buy: "nan", sell: "nan", lastUpdate: "")
  }

  var theUSD: String?
  // For save all currencies
  var bank: ConvertCurrency.Bank = ConvertCurrency.Bank(name: KKUserSetting.source,
                                                        swiftCode: KKUserSetting.source,
                                                        stock: [],
                                                        cash: [])
  // MARK: Fetch Data

  func fetchCurrencies(request: ConvertCurrency.Fetch.Request) {
    worker.fetchRemote(source: request.source) { [weak self] (bank, error) in
      if let error = error {
        let response = Base.HandleError.Response(error: error)
        self?.presenter?.presentError(response: response)
      }
      guard let bank = bank else { return }
      var currencies = bank.currency.map {
        return ConvertCurrency.Currency(name: $0.name,
                                        buy: $0.buy,
                                        sell: $0.sell,
                                        lastUpdate: $0.lastUpdate)
      }
      // 1. Insert twd
      guard let exchangeType = request.source.exchangeType else { return }
      guard let mutableCurrencies = self?.insertNTD(exchangeType: exchangeType,
                                                       currencies: currencies) else { return }
      currencies = mutableCurrencies
      // 2. Assign Currencies include twd to global varaiable
      if exchangeType == .stock {
        self?.bank.stock = currencies
      } else {
        self?.bank.cash = currencies
      }
      // 3. get favorite currencies
      guard let filteredCurrencies = self?.getFavoriteCurrencies(exchangeType: exchangeType) else {
          return
      }
      let response = ConvertCurrency.Fetch.Response(exchangeType: exchangeType,
                                                    currencies: filteredCurrencies)
      self?.presenter?.presentFetchedCurrencies(response: response)
    }
  }

  func switchChange(request: ConvertCurrency.Get.Request) {
    let filteredCurrencies = getFavoriteCurrencies(exchangeType: request.exchangeType)
    let response = ConvertCurrency.Get.Response(currencies: filteredCurrencies)
    presenter?.presentSwitchChange(response: response)
  }

  func reloadEditedFavorite(request: ConvertCurrency.Edit.Request) {
    let filteredCurrencies = getFavoriteCurrencies(exchangeType: request.exchangeType)
    let response = ConvertCurrency.Edit.Response(currencies: filteredCurrencies)
    presenter?.presentEdited(response: response)
  }

  // Mapping favoriteCurrencies from bank.stock or cash
  private func insertNTD(exchangeType: ExchangeType,
                         currencies: [ConvertCurrency.Currency]) -> [ConvertCurrency.Currency] {
    var mutableCurrencies = currencies
    let baseRate = ConvertCurrency.Currency(name: "twd",
                                            buy: "1.0",
                                            sell: "1.0",
                                            lastUpdate: currencies.first?.lastUpdate
                                              ?? currencies.last?.lastUpdate
                                              ?? Date().timeStringValue)
    mutableCurrencies.insert(baseRate, at: 0)
    return mutableCurrencies
  }

  private func getFavoriteCurrencies(exchangeType: ExchangeType) -> [ConvertCurrency.Currency] {
    let currencies = exchangeType == .stock
      ? bank.stock
      : bank.cash
    let filteredCurrencies = favoriteCurrencyList.map { (favor) -> ConvertCurrency.Currency in
      guard let currency = currencies.filter({ (c) -> Bool in
        return c.name == favor.name
      }).first else {
        return favor
      }
      return currency
    }
    favoriteCurrencyList = filteredCurrencies
    return filteredCurrencies
  }

  // To make two list equal, fill will "nan" will nil currency
  func makeEqual() {
    guard bank.stock.containsSameElements(as: bank.cash) == false else {
      return
    }
    var newStock = bank.stock
    var newCash = bank.cash
    // Compare stock and cash
    let diffStockCash = DS().diff(newStock, newCash, compare: { $0.name == $1.name })
    // Merge newStock
    for insert in diffStockCash.inserted {
      if (newStock.contains { $0.name == insert.name }) {
        continue
      }
      newStock.append(ConvertCurrency.Currency(name: insert.name,
                                               buy: "nan",
                                               sell: "nan",
                                               lastUpdate: insert.lastUpdate))
    }
    // Compare cash and stock
    let diffCashStock = DS().diff(newCash, newStock, compare: { $0.name == $1.name })
    // Merge newCash
    for insert in diffCashStock.inserted {
      if (newCash.contains { $0.name == insert.name }) {
        continue
      }
      newCash.append(ConvertCurrency.Currency(name: insert.name,
                                              buy: "nan",
                                              sell: "nan",
                                              lastUpdate: insert.lastUpdate))
    }
    // assign whole new currency
    bank.stock = newStock
    bank.cash = newCash
    guard bank.stock.containsSameElements(as: bank.cash) else {
    makeEqual()
      return
    }
  }

func updateCellTextField(request: ConvertCurrency.Calculate.Request) {
    let results = updateCell(exchangeType: request.exchangeType,
                             tradeType: request.tradeType,
                             subjectRate: request.subjectRate,
                             content: request.content)
    let response = ConvertCurrency.Calculate.Response(results: results)
    presenter?.presentUpdateCellTextField(response: response)
  }

  func updateCellPlaceHolder(request: ConvertCurrency.Calculate.Request) {
    let results = updateCell(exchangeType: request.exchangeType,
                             tradeType: request.tradeType,
                             subjectRate: request.subjectRate,
                             content: request.content)
    let response = ConvertCurrency.Calculate.Response(results: results)
    presenter?.presentUpdateCellPlaceHolder(response: response)
  }

  private func updateCell(exchangeType: ExchangeType, tradeType: TradeType, subjectRate: String, content: String) -> [String] {
    // Find usd
    let theUSD = (exchangeType == .stock ? bank.stock : bank.cash).filter ({
      return $0.name == "usd"
    }).last
    self.theUSD = tradeType == .buy ? theUSD?.buy : theUSD?.sell
    guard let usd = self.theUSD else { return [] }
    // Find current favorite currencies
    let currencies = getFavoriteCurrencies(exchangeType: exchangeType) //
    // Convert Currency steps:
    // e.g. TWD to HDK
    // 1. convert TWD to USD
    // 2. convert USD to HKD
    let calculator = CalculatorWorker()
    let results = calculator.calculate(usd: usd,
                                       subject: subjectRate,
                                       content: content,
                                       currencies: currencies.map {
                                        return tradeType == .buy
                                          ? $0.buy
                                          : $0.sell })
    return results
  }
}

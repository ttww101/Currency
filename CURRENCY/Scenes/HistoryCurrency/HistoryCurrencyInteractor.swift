//
//  HistoryCurrencyInteractor.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 28/03/2018.
//  Copyright (c) 2018 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryCurrencyBusinessLogic {
  func getSeguePassedCurrency(request: HistoryCurrency.Load.Request)
  func fetchCurrencyHistory(request: HistoryCurrency.Fetch.Request)
}

protocol HistoryCurrencyDataStore {
  var name: String { get set }
  var period: Period { get set }
  var historiesStorage: HistoryCurrency.Storage.HistoryStorage { get set }
}

class HistoryCurrencyInteractor: HistoryCurrencyBusinessLogic, HistoryCurrencyDataStore {
  var presenter: HistoryCurrencyPresentationLogic?
  var worker: HistoryCurrencyWorker = HistoryCurrencyWorker()

  var name: String = ""
  var period: Period = Period.defaultValue
  var historiesStorage: HistoryCurrency.Storage.HistoryStorage = HistoryCurrency.Storage.HistoryStorage()

  // MARK: Fetch currency history

  func getSeguePassedCurrency(request: HistoryCurrency.Load.Request) {
    let response = HistoryCurrency.Load.Response(name: name)
    presenter?.presentSeguePassedCurrency(response: response)
  }

  func fetchCurrencyHistory(request: HistoryCurrency.Fetch.Request) {
    self.period = request.period
    guard let savedHistories = historiesStorage.getHistory(period: request.period) else {
      worker.getHistory(source: .google(KKUserSetting.currencyUnit, name, period)) { [weak self] (histories, error) in
        if let error = error {
          let response = Base.HandleError.Response(error: error)
          self?.presenter?.presentError(resopnse: response)
          return
        }
        guard let histories = histories else {
          // Error Handling
          let response = Base.HandleError.Response(error: FetchDataError.remote)
          self?.presenter?.presentError(resopnse: response)
          return
        }
        self?.historiesStorage.setHistory(period: request.period, history: histories)
        let response = HistoryCurrency.Fetch.Response(period: request.period,
                                                      histories: histories)
        self?.presenter?.presentFetchedCurrencyHistory(response: response)
      }
      return
    }
    let response = HistoryCurrency.Fetch.Response(period: request.period,
                                                  histories: savedHistories)
    presenter?.presentFetchedCurrencyHistory(response: response)
  }
}

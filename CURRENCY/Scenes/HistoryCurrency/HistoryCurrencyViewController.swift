//
//  HistoryCurrencyViewController.swift
//  CURRENCY
//
//  Created by Stan Liu on 28/03/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero
import SVProgressHUD

protocol HistoryCurrencyDisplayLogic: class {
  func displaySeguePassedCurrency(viewModel: HistoryCurrency.Load.ViewModel)
  func displayFetchedCurrencyHistory(viewModel: HistoryCurrency.Fetch.ViewModel)
  func displayError(viewModel: Base.HandleError.ViewModel)
}

class HistoryCurrencyViewController: UIViewController,
  HistoryCurrencyDisplayLogic,
  LanguageRelodable,
  LoadingControl {
  var interactor: HistoryCurrencyBusinessLogic?
  var router: (NSObjectProtocol & HistoryCurrencyRoutingLogic & HistoryCurrencyDataPassing)?

  // MARK: Object lifecycle
  var displayRates: [Decimal] = []
  var period: Period = Period(name: UserSettings.historyPeriod()) ?? Period.defaultValue

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = HistoryCurrencyInteractor()
    let presenter = HistoryCurrencyPresenter()
    let router = HistoryCurrencyRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }


  var indicatorView: UIView {
    return UIActivityIndicatorView(style: .gray)
  }
  @IBOutlet weak var divergenceLabel: DivergenceLabel!
  @IBOutlet weak var containerView: UIView!
  var lastScrollOffset: CGPoint?
  let maxHeaderHeight: CGFloat = 220
  let minHeaderHeight: CGFloat = 0

  override func viewDidLoad() {
    super.viewDidLoad()
    configure()
    configureReachability()
    configureEmbededViewController()

    loadSeguePassedCurrency()
    fetchCurrencyHistory()
    embededVCFetchData()
  }

  func configure() {
    self.isHeroEnabled = true
    divergenceLabel.font = Configuration.Font.numericFont.size(of: 15)

    if #available(iOS 11.0, *) {
      navigationItem.largeTitleDisplayMode = .never
    } else {
      // Fallback on earlier versions
    }
  }

  func configureReachability() {
    let reachabilityWorker = ReachabilityWorker.shared
    reachabilityWorker.whenReachable = { [weak self] (reachability) in
      guard reachability.connection != .none else { return }
      // Do things when connection comes back
      self?.fetchCurrencyHistory()
      self?.embededVCFetchData()
    }
    reachabilityWorker.whenUnreachable = { _ in
      // Do thins notify user has no connection currently
      SVProgressHUD.showError(withStatus: NetworkError.noInternet.localizedDescription)
    }
  }

  func configureEmbededViewController() {
    guard let twBankVC = children.filter({
      return $0 is TWBankViewController
    }).first as? TWBankViewController else { return }
    twBankVC.stockVC?.scrollViewBridge = self
    twBankVC.cashVC?.scrollViewBridge = self
  }



  func reloadLanguage() {
    loadSeguePassedCurrency()
    guard let twBankVC = children.filter({
      return $0 is TWBankViewController
    }).first as? TWBankViewController, twBankVC.isViewLoaded else { return }
    twBankVC.reloadLanguage()
  }

  func embededVCFetchData() {
    guard let twBankVC = children.filter({
      return $0 is TWBankViewController
    }).first as? TWBankViewController, twBankVC.isViewLoaded else { return }
    twBankVC.fetchAll()
  }

  // MARK: Load Segue Passed Currency

  func loadSeguePassedCurrency() {
    let request = HistoryCurrency.Load.Request()
    interactor?.getSeguePassedCurrency(request: request)
  }

  func fetchCurrencyHistory() {
    showLoading()
    let request = HistoryCurrency.Fetch.Request(period: period)
    interactor?.fetchCurrencyHistory(request: request)
  }

  // MARK: Display Title, Fetched Currency History

  func displaySeguePassedCurrency(viewModel: HistoryCurrency.Load.ViewModel) {
    
    let sourceCurrency = LanguageWorker.shared.localizedString(key: viewModel.name,
                                                           table: .listCurrency)
    
    let ntd = LanguageWorker.shared.localizedString(key: UserSettings.currencyUnit,
                                                           table: .listCurrency)
    
    let change = LanguageWorker.shared.localizedString(key: R.string.uI.change.key,
                                                    table: .ui)
    
    self.title = sourceCurrency + " " + change + " " + ntd
  }

  func displayFetchedCurrencyHistory(viewModel: HistoryCurrency.Fetch.ViewModel) {
    dismissLoading()
    guard var rate = viewModel.rates.last, viewModel.rates.count > 1 else { return }
    // fix: endIndex - 1 == last, 
    // ex: rate.count is 84, rate.endIndex is 84, but last second need to be 82
    let lastSecondRate = viewModel.rates[viewModel.rates.endIndex - 2]
    var diff = (rate - lastSecondRate)
    let decimalDiff = diff.decimal(after: 4)
    divergenceLabel.bind(tendency: Tendency(amount: decimalDiff), amountString: decimalDiff.stringValue)
//    rateLabel.text = rate.decimal(after: 4).stringValue.dollarMark
    displayRates = viewModel.rates
  }

  func displayError(viewModel: Base.HandleError.ViewModel) {
    SVProgressHUD.showError(withStatus: viewModel.error.localizedDescription)
    dismissLoading()
  }

  // MARK: PeriodSegmentedControlDelegate


  func segmentedControl(_ segmentedControl: PeriodSegmentedControl,
                        didChangeFromSegmentAtIndex fromIndex: Int,
                        toSegmentAtIndex toIndex: Int) {
    for (index, period) in Period.all.enumerated()
      where index == toIndex {
        self.period = period
    }
    fetchCurrencyHistory()
  }
}

// MARK: UIScrollViewBridge

// implement flexible chart
extension HistoryCurrencyViewController: UIScrollViewBridge {

 
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    if scrollView.contentSize.height > maxHeaderHeight {
      defer { // This line will always be executed in the end.
        lastScrollOffset = scrollView.contentOffset
      }
      guard let lastScrollOffset = lastScrollOffset else { return }
      let absoluteTop: CGFloat = 0
      let absoluteBottom: CGFloat = scrollView.contentSize.height - scrollView.frame.size.height
      let scrollDiff = scrollView.contentOffset.y - lastScrollOffset.y
      let isScrollingUP = scrollDiff > 0 && scrollView.contentOffset.y > absoluteTop
      let isScrollingDOWN = scrollDiff < 0 && scrollView.contentOffset.y < absoluteBottom

    }
  }


 
}

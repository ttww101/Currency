//
//  ChartViewController.swift
//  CURRENCY
//
//  Created by Stan Liu on 28/03/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero

protocol ChartDisplayLogic: class {
  func displayFetchedHistory(viewModel: Chart.Fetch.ViewModel)
}

class ChartViewController: UIViewController,
  ChartDisplayLogic,
  UITableViewDelegate,
  UITableViewDataSource {
  var interactor: ChartBusinessLogic?
  var router: (NSObjectProtocol & ChartRoutingLogic & ChartDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = ChartInteractor()
    let presenter = ChartPresenter()
    let router = ChartRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  @IBOutlet weak var tableView: UITableView!

  override func viewDidLoad() {
    super.viewDidLoad()
    configureTableView()
    fetchCurrencyHistory()

    self.isHeroEnabled = true
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    navigationController?.navigationBar.isHidden = true
  }

  func configureTableView() {
    tableView.delegate = self
    tableView.dataSource = self
    tableView.sectionHeaderHeight = 450
    tableView.estimatedSectionHeaderHeight = UITableView.automaticDimension
    tableView.rowHeight = 40
    tableView.isScrollEnabled = false

    tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
  }

  @IBAction func dismissButtonTap(_ sender: Any) {
    hero_dismissViewController()
  }
  // MARK: Fetch currency history

  func fetchCurrencyHistory() {
    let request = Chart.Fetch.Request()
    interactor?.fetchCurrencyHistory(request: request)
  }

  func displayFetchedHistory(viewModel: Chart.Fetch.ViewModel) {
  }

  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    router?.routeToChartViewController()
  }

  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return 10
  }

  func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
//    guard let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: R.nib.chartHeader.name) as? ChartHeader else {
//      return R.nib.chartHeader.firstView(owner: self)
//    }
//    header.heroID = "Cell_ChartImageView"
//    return header
    return nil
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: "cell") else {
      return UITableViewCell()
    }
    cell.textLabel?.text = "Fuck"
    return cell
  }
}

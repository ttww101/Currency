//
//  CurrencyPresenter.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 09/11/2017.
//  Copyright (c) 2017 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyPresentationLogic {
  func presentFetchedSubjects(response: Currency.Subject.Response)
  func presentChart(response: Currency.Subject.Response)
  func presentDashBoard(response: Currency.Subject.Response)
  func presentTableView(response: Currency.Subject.Response)
  func presentError(response: Currency.FetchError.Response)
}

class CurrencyPresenter: CurrencyPresentationLogic {
  weak var viewController: CurrencyDisplayLogic?

  // MARK: Present fetched subjects with all views

  func presentFetchedSubjects(response: Currency.Subject.Response) {
    presentChart(response: response)
    presentDashBoard(response: response)
    presentTableView(response: response)
  }

  // MARK: Present single view

  // present 5 days buy or sell
  func presentChart(response: Currency.Subject.Response) {
    var response = response
    let displaySubject = response.subject.mapping()
    let viewModel = Currency.Subject.ViewModel(displaySubject: displaySubject)
    viewController?.displayChart(viewModel: viewModel)
  }

  // just present today date's subject
  func presentDashBoard(response: Currency.Subject.Response) {
    var response = response
    let displaySubject = response.subject.mapping()
    let viewModel = Currency.Subject.ViewModel(displaySubject: displaySubject)
    viewController?.displayDashBoard(viewModel: viewModel)
  }

  // present 5 days buy or sell
  func presentTableView(response: Currency.Subject.Response) {
    var response = response
    let displaySubject = response.subject.mapping()
    let viewModel = Currency.Subject.ViewModel(displaySubject: displaySubject)
    viewController?.displayTableView(viewModel: viewModel)
  }

  func presentError(response: Currency.FetchError.Response) {
    let viewModel = Currency.FetchError.ViewModel(description: response.description)
    viewController?.displayError(viewModel: viewModel)
  }
}

extension CurrencyPresenter {
}

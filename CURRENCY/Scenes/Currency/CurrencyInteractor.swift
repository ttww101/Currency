//
//  CurrencyInteractor.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 09/11/2017.
//  Copyright (c) 2017 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyBusinessLogic {

  /// Fetch Currency Subject
  ///
  /// - Parameter request: VIP request
  func fetchRemote(request: Currency.Subject.Request)

  /// Fetch Local Currency Subject
  ///
  /// - Parameter request: VIP request
  func fetchLocal(request: Currency.Subject.Request)

  /// Fetch Fake Currency Subject
  ///
  /// - Parameter request: VIP request
  func fetchFake(request: Currency.Subject.Request)

  /// Switch line chart trigger switch
  ///
  /// - Parameter request: VIP request
  func switchExchangeType(request: Currency.Subject.Request)
}

protocol CurrencyDataStore {
  var investmentSubject: InvestmentSubject? { get set }
}

class CurrencyInteractor: CurrencyBusinessLogic, CurrencyDataStore {
  var presenter: CurrencyPresentationLogic?
  var worker: CurrencyWorker?
  var investmentSubject: InvestmentSubject?

  func fetchFake(request: Currency.Subject.Request) {
    if worker == nil { worker = CurrencyWorker() }
    guard let worker = worker else { return }

    let source = worker.loadFakeSource()
    // currency should filter by UserSetting.defaultCurrency
    guard let currency = source.currencies.first else {
      return
    }
    self.investmentSubject = currency
    guard let investmentSubject = self.investmentSubject else {
      return
    }
    let calculatedDivergenceOfSubjects = worker.calculateDivergence(of: investmentSubject)
    let response = Currency.Subject.Response(subject: calculatedDivergenceOfSubjects,
                                             tradeType: request.tradeType,
                                             exchangeType: request.exchangeType)
    self.presenter?.presentFetchedSubjects(response: response)
  }

  // MARK: Fetch Subjects

  func fetchRemote(request: Currency.Subject.Request) {
    if worker == nil { worker = CurrencyWorker() }
    guard let worker = worker else { return }
    // fetch remote
    worker.fetchRemote { (currency, error) in
      guard let currency = currency else {
        guard error != nil else { return }
        let response = Currency.FetchError.Response(description: NetworkError.server.localizedDescription)
        self.presenter?.presentError(response: response)
        return
      }
      self.investmentSubject = currency
      let response = Currency.Subject.Response(subject: currency,
                                               tradeType: request.tradeType,
                                               exchangeType: request.exchangeType)
      self.presenter?.presentFetchedSubjects(response: response)
    }
  }

  func fetchLocal(request: Currency.Subject.Request) {
    if worker == nil { worker = CurrencyWorker() }
    guard let worker = worker else { return }
    // load local
    guard
      let currency = worker.loadLocalCurrency(by: UserSettings.source,
                                              currency: UserSettings.currency)
      else {
        let response = Currency.FetchError.Response(description: LoadDataError.empty.localizedDescription)
        self.presenter?.presentError(response: response)
        return
    }
    self.investmentSubject = currency
    let response = Currency.Subject.Response(subject: currency,
                                             tradeType: request.tradeType,
                                             exchangeType: request.exchangeType)
    self.presenter?.presentFetchedSubjects(response: response)
  }

  // MARK: Switch

  func switchExchangeType(request: Currency.Subject.Request) {
    guard let investmentSubject = self.investmentSubject else {
      let errorString = LanguageWorker.shared.localizedString(key: R.string.uI.switchExchangeError.key,
                                                              table: .ui)
      let subject = LanguageWorker.shared.localizedString(key: UserSettings.currency,
                                                          table: .listCurrency)
      let response = Currency.FetchError.Response(description: errorString + subject)
      self.presenter?.presentError(response: response)
      return
    }
    let response = Currency.Subject.Response(subject: investmentSubject,
                                             tradeType: request.tradeType,
                                             exchangeType: request.exchangeType)
    presenter?.presentChart(response: response)
    presenter?.presentDashBoard(response: response)
    presenter?.presentTableView(response: response)
  }
}

//
//  CurrencyViewController.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 09/11/2017.
//  Copyright (c) 2017 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CRRefresh
import SVProgressHUD

protocol CurrencyDisplayLogic: class {
  func displayChart(viewModel: Currency.Subject.ViewModel)
  func displayDashBoard(viewModel: Currency.Subject.ViewModel)
  func displayTableView(viewModel: Currency.Subject.ViewModel)
  func displayError(viewModel: Currency.FetchError.ViewModel)
}

class CurrencyViewController: UIViewController,
  CurrencyDisplayLogic,
  UITableViewDelegate,
  UITableViewDataSource,
  NetworkReachable,
  LanguageRelodable,
  CurrencyReloadable,
  LoadingControl {

  var interactor: CurrencyBusinessLogic?
  var router: (NSObjectProtocol & CurrencyRoutingLogic & CurrencyDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = CurrencyInteractor()
    let presenter = CurrencyPresenter()
    let router = CurrencyRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  // MARK: UI
  var onView: LoadingContainer {
    if let backgroundView = tableView.backgroundView {
      return backgroundView
    }
    return view
  }
  @IBOutlet weak var switcher: Switcher!
  @IBOutlet weak var dashboardParentView: UIView!
  var dashboard: DashBoard!
  @IBOutlet weak var lineChart: SimpleChart!
  @IBOutlet var tableView: UITableView!

  // MARK: Data
  var displayTrades: [Currency.Subject.ViewModel.DisplayTrade] = []
  var exchangeType: ExchangeType = .stock
  var tradeType: TradeType = .buy
  var period: Period = .month3
  var isCRRefreshing: Bool = false // For CRRefresh

  override func viewDidLoad() {
    super.viewDidLoad()
    // viewController setup
    configure()
    configureReachability()
    configureDashBoard()
    configureTableView()

    // fetch data
    fetchData(pulling: false)
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    // This view always hide navigation
    navigationController?.isNavigationBarHidden = true
  }

  // MARK: Setup ViewController

  func configure() {
    view.backgroundColor = KKConfiguration.Theme.white
  }

  // MARK: Setup ReachabilityWorker

  func configureReachability() {
    let reachabilityWorker = ReachabilityWorker.shared
    reachabilityWorker.whenReachable = { [weak self] (reachability) in
      print(reachability.description)
      guard reachability.connection != .none else {
        return
      }
      // Do things when connection comes back
      self?.fetchData(pulling: false)
    }
    reachabilityWorker.whenUnreachable = { (reachability) in
      print(reachability.description)
      // Do thins notify user has no connection currently
      SVProgressHUD.showError(withStatus: NetworkError.noInternet.localizedDescription)
    }
  }

  // MARK: Setup Dashboard

  func configureDashBoard() {
    guard let dashboard = R.nib.dashBoard.firstView(owner: self) else {
      return
    }
    self.dashboard = dashboard
    dashboard.backgroundColor = .clear
    dashboardParentView.addSubview(dashboard)
    dashboard.switchBtnHandler = { [unowned self] in
      self.router?.routeToSelectCurrency(segue: nil)
    }
    dashboard.name = LanguageWorker.shared.localizedString(key: UserSettings.currency,
                                                           table: .listCurrency)
  }

  // MARK: Setup TableView

  func configureTableView() {
    tableView.delegate = self
    tableView.dataSource = self
    tableView.backgroundColor = .clear
    tableView.rowHeight = 60
    tableView.estimatedRowHeight = UITableView.automaticDimension
    tableView.separatorColor = KKConfiguration.Theme.lightBlue
    tableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    //tableView.allowsSelection = false
    tableView.register(R.nib.recordCell(), forCellReuseIdentifier: R.reuseIdentifier.recordCell.identifier)

    // TableView Refresh Control
    tableView.cr.addHeadRefresh(animator: FastAnimator()) { [unowned self] in
      self.pullToFetchData()
    }
  }

  func reloadLanguage() {
    switcher.reloadTitle()
    getCurrentCurrency()
  }

  func reloadCurrency() {
    getCurrentCurrency()
  }

  func showFullScreenAd() {
    /// FIXME:  stephen

  }

  // MARK: Fetch Investment Subjects

  func fetchData(pulling: Bool) {
    guard ReachabilityWorker.shared.isReachable else {
      SVProgressHUD.showError(withStatus: NetworkError.noInternet.localizedDescription)
      fetchLocal()
      return
    }
    if !pulling {
      showLoading()
    }
    let request = Currency.Subject.Request(tradeType: tradeType,
                                           exchangeType: exchangeType)
    interactor?.fetchRemote(request: request)
  }

  func fetchLocal() {
    let request = Currency.Subject.Request(tradeType: tradeType,
                                           exchangeType: exchangeType)
    interactor?.fetchLocal(request: request)
  }

  func getCurrentCurrency() {
    let request = Currency.Subject.Request(tradeType: tradeType,
                                           exchangeType: exchangeType)
    interactor?.switchExchangeType(request: request)
  }

  func pullToFetchData() {
    isCRRefreshing = true
    fetchData(pulling: true)
  }

  // MARK: CurrencyPresenter display

  func displayTableView(viewModel: Currency.Subject.ViewModel) {
    dismissLoading()
    if isCRRefreshing {
      tableView.cr.endHeaderRefresh()
      isCRRefreshing = false
    }
    displayTrades = exchangeType == .cash
      ? viewModel.displaySubject.cash
      : viewModel.displaySubject.stock
    displayTrades = displayTrades.reversed()
    tableView.reloadData()
  }

  func displayChart(viewModel: Currency.Subject.ViewModel) {
    var filteredDates: [String] = []
    var filteredRates: [Decimal] = []
    let exchanges = exchangeType == .cash
      ? viewModel.displaySubject.cash
      : viewModel.displaySubject.stock
    let filteredExchange = Array(exchanges.suffix(period.count))

    for exchange in filteredExchange {
      filteredDates.append(exchange.date.keepMonthDay)
      let rate = tradeType == .buy ? exchange.buy.amount : exchange.sell.amount
      filteredRates.append(rate.antiDollarMark.decimalNumber)
    }
    lineChart.subjects = filteredRates
    lineChart.dates = filteredDates

    let sourceTitle = LanguageWorker.shared.localizedString(key: UserSettings.source,
                                                            table: .listCurrency)
    let sourcePrefix = LanguageWorker.shared.localizedString(key: R.string.uI.source_from.key,
                                                             table: .ui)
    let sourceDescription =  sourcePrefix + " " + sourceTitle
    lineChart.sourceDescription = sourceDescription
    lineChart.reloadData()
  }

  func displayDashBoard(viewModel: Currency.Subject.ViewModel) {
    let localizedKey = viewModel.displaySubject.name.lowercased()
    dashboard.name = LanguageWorker.shared.localizedString(key: localizedKey,
                                                           table: .listCurrency)
    // lastUpate convert to timeStringValue in InvestmentSubject.swift InvestmentSubject
    dashboard.date = viewModel.displaySubject.lastUpdate
    let trades = exchangeType == .cash
      ? viewModel.displaySubject.cash
      : viewModel.displaySubject.stock
    guard let trade = TimeWorker.latestTrade(trades: trades) else { return }
    dashboard.buyDash.name = LanguageWorker.shared.localizedString(key: R.string.uI.buy.key,
                                                                   table: .ui)
    dashboard.buyDash.rate = trade.buy.amount.userSettingDecimal.dollarMark
    dashboard.buyDash.divergence = Divergence(amount: trade.buy.divergenceAmount)

    dashboard.sellDash.name = LanguageWorker.shared.localizedString(key: R.string.uI.sell.key,
                                                                    table: .ui)
    dashboard.sellDash.rate = trade.sell.amount.userSettingDecimal.dollarMark
    dashboard.sellDash.divergence = Divergence(amount: trade.sell.divergenceAmount)
  }

  func displayError(viewModel: Currency.FetchError.ViewModel) {
    dismissLoading()
    // If load local and get empty data, load remote
    if viewModel.description == LoadDataError.empty.localizedDescription {
      if ReachabilityWorker.shared.isReachable {
        fetchData(pulling: false)
      } else {
        SVProgressHUD.showError(withStatus: NetworkError.noInternet.localizedDescription)
      }
      return
    }
    if isCRRefreshing {
      tableView.cr.endHeaderRefresh()
      isCRRefreshing = false
    }
    SVProgressHUD.showError(withStatus: viewModel.description)
  }

  // MARK: Switcher did switch

  @IBAction func switchDidChange(_ sender: Any) {
    guard let switcher = sender as? Switcher else {
      return
    }
    exchangeType = switcher.selectedIndex == 0 ? .stock : .cash
    getCurrentCurrency()
  }

  // MARK: UITableViewDelegate

  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    //performSegue(withIdentifier: "Example", sender: nil)
    performSegue(withIdentifier: "TWBank", sender: nil)
  }

  // MARK: UITableViewDataSource

  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayTrades.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

    guard let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.recordCell.identifier) as? RecordCell else {
      fatalError("RecordCell is nil")
    }
    cell.backgroundColor = indexPath.row % 2 == 0 ? KKConfiguration.Theme.lightGray : KKConfiguration.Theme.white
    let displayTrade = displayTrades[indexPath.row]

    cell.dateLabel.text = displayTrade.date

    cell.buyRateLabel.text = displayTrade.buy.amount.userSettingDecimal.dollarMark
    cell.divergenceOfBuyLabel.text = displayTrade.buy.divergenceAmount
    cell.divergenceOfBuyLabel.tendency = displayTrade.buy.tendency

    cell.sellRateLabel.text = displayTrade.sell.amount.userSettingDecimal.dollarMark
    cell.divergenceOfSellLabel.text = displayTrade.sell.divergenceAmount
    cell.divergenceOfSellLabel.tendency = displayTrade.sell.tendency

    return cell
  }
}

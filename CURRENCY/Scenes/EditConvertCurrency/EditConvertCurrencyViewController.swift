//
//  EditConvertCurrencyViewController.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 09/02/2018.
//  Copyright (c) 2018 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditConvertCurrencyDisplayLogic: class {
  func displayBankCurrencies(viewModel: EditConvertCurrency.Favorites.ViewModel)
  func displayToggledFavoriteCurrencies(viewModel: EditConvertCurrency.Update.ViewModel)
}

class EditConvertCurrencyViewController: UIViewController, EditConvertCurrencyDisplayLogic, UITableViewDelegate, UITableViewDataSource {
  var interactor: EditConvertCurrencyBusinessLogic?
  var router: (NSObjectProtocol & EditConvertCurrencyRoutingLogic & EditConvertCurrencyDataPassing)?

  // MARK: Object lifecycle
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var optionView: OptionView!

  var displayCurrencies: [EditConvertCurrency.Favorites.ViewModel.DisplayCurrency] = []

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = EditConvertCurrencyInteractor()
    let presenter = EditConvertCurrencyPresenter()
    let router = EditConvertCurrencyRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
    configureOptionView()
    configureTableView()

    loadCurrencies()
  }

  func configureOptionView() {
    optionView.confirmHandler = { [weak self] in
      // filter favorite from DisplayCurrency.isFavored == true
      // and take it' name
      let favoriteCurrencies = self?.displayCurrencies.filter {
        return $0.isFavored == true
        }.map { return $0.name }

      guard
      let favorite = favoriteCurrencies,
      // This check that if user edit their favorite currencies
      favorite != UserSettings.favoriteCurrencies()
        else {
          self?.dismiss(animated: true, completion: nil)
          return
      }
      UserSettings.setFavoriteCurrencies(currencies: favorite)
      self?.router?.routeToConvertCurrency(segue: nil)
    }
    optionView.cancelHandler = { [weak self] in
      self?.dismiss(animated: true, completion: nil)
    }
  }

  func configureTableView() {
    tableView.delegate = self
    tableView.dataSource = self
    tableView.rowHeight = 60
    tableView.separatorColor = KKConfiguration.Theme.lightBlue
    tableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    tableView.register(R.nib.moreCell(), forCellReuseIdentifier: R.reuseIdentifier.moreCell.identifier)
  }

  // MARK: Load Currencies

  func loadCurrencies() {
    let request = EditConvertCurrency.Favorites.Request()
    interactor?.fetchBankCurrencies(request: request)
  }

  func toggle(name: String, at indexPath: IndexPath) {
    let request = EditConvertCurrency.Update.Request(indexPath: indexPath, name: name)
    interactor?.toggleFavoriteCurrencies(request: request)
  }

  // MARK: Display

  func displayBankCurrencies(viewModel: EditConvertCurrency.Favorites.ViewModel) {
    self.displayCurrencies = viewModel.displayCurrencies
    tableView.reloadData()
  }

  func displayToggledFavoriteCurrencies(viewModel: EditConvertCurrency.Update.ViewModel) {
    self.displayCurrencies = viewModel.displayCurrencies
    tableView.reloadRows(at: [viewModel.indexPath], with: .none)
  }

  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let name = displayCurrencies[indexPath.row].name
    toggle(name: name, at: indexPath)
  }

  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
     return displayCurrencies.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.moreCell.identifier) as? MoreCell else {
      return UITableViewCell()
    }
    cell.selectionStyle = .none
    cell.tintColor = KKConfiguration.Theme.green
    let currency = displayCurrencies[indexPath.row]
    cell.accessoryType = currency.isFavored
        ? UITableViewCell.AccessoryType.checkmark
        : UITableViewCell.AccessoryType.none
    cell.nameLabel.text = LanguageWorker.shared.localizedString(key: currency.name,
                                                                table: .listCurrency)

    return cell
  }
}

//
//  ListBankCurrencyViewController.swift
//  ExchangeHelper
//
//  Created by Meiliang Wen on 27/03/2018.
//  Copyright (c) 2018 Meiliang Wen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero
import SVProgressHUD

protocol ListBankCurrencyDisplayLogic: class {
  func displayFetchedList(viewModel: ListBankCurrency.FetchCurrencyList.ViewModel)
  func displayError(viewModel: Base.HandleError.ViewModel)
}

class ListBankCurrencyViewController: UIViewController,
  ListBankCurrencyDisplayLogic,
  UITableViewDelegate,
  UITableViewDataSource,
LanguageRelodable {
  var interactor: ListBankCurrencyBusinessLogic?
  var router: (NSObjectProtocol & ListBankCurrencyRoutingLogic & ListBankCurrencyDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup
  var displayBank: BankCurrency.Fetch.DisplayBank?
  var displayNameMaxWidth: CGFloat = 75
  var routerHandler: ((String, String?, Bool, IndexPath) -> Void)?
  var finishDisplayHandler: (() -> Void)? // for notify Parent VC to dismiss loading

//  lazy var mpAdsViewModel: MPAdsViewModel = {
//    return MPAdsViewModel(adsPosition: .fix(0),
//                          tableView: tableView,
//                          cellClass: CurrencyCell.self,
//                          viewController: self)
//  }()

  private func setup() {
    let viewController = self
    let interactor = ListBankCurrencyInteractor()
    let presenter = ListBankCurrencyPresenter()
    let router = ListBankCurrencyRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  lazy var tableView: UITableView = {
    let _tableView = UITableView(frame: CGRect.zero, style: UITableView.Style.plain)
    return _tableView
  }()

  var allowTableViewEditing: Bool = false

  override func viewDidLoad() {
    super.viewDidLoad()
    configure()
    configureTableView()
    //fetchCurrencyList() // Router already call this.
  }

  func configure() {
    self.isHeroEnabled = true
  }

  func configureTableView() {
    view.addSubview(tableView)
    tableView.translatesAutoresizingMaskIntoConstraints = false
    tableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
    tableView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
    tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
    tableView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
    tableView.delegate = self
    tableView.dataSource = self
    tableView.estimatedRowHeight = UITableView.automaticDimension
    tableView.rowHeight = 60
    tableView.sectionHeaderHeight = 40
    tableView.sectionFooterHeight = 40
    tableView.separatorColor = Configuration.Theme.lightBlue
    tableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)

    tableView.register(R.nib.currencyCell(),
                       forCellReuseIdentifier: R.nib.currencyCell.name)
    tableView.register(R.nib.bankHeader(),
                       forHeaderFooterViewReuseIdentifier: R.nib.bankHeader.name)
  }

  func reloadLanguage() {
    fetchCurrencyList()
    guard let header = tableView.headerView(forSection: 0) as? BankHeader else {
      return
    }
    header.reload()
  }

  // MARK: Fetch Currency List

  func fetchCurrencyList() {
    let request = ListBankCurrency.FetchCurrencyList.Request()
    interactor?.fetchCurrencyList(request: request)

//    mpAdsViewModel.loadAds() // reload Currency also re-fetch ads
  }

  func displayFetchedList(viewModel: ListBankCurrency.FetchCurrencyList.ViewModel) {
    self.displayBank = viewModel.displayBank
    // Sizing displayRate's name width to get the perfect nameLabel width
    self.displayNameMaxWidth = viewModel.displayNameMaxWidth
    tableView.reloadData()
    finishDisplayHandler?()
    guard viewModel.displayBank.currencies.count > 0 else {
      let noData = LanguageWorker.shared.localizedString(key: R.string.uI.no_data.key,
                                                         table: .ui)
      showAnnouncement(text: noData)
      return
    }
    dismissAnnouncement()
  }

  func displayError(viewModel: Base.HandleError.ViewModel) {
    SVProgressHUD.showError(withStatus: viewModel.error.localizedDescription)
  }

  // MARK: UITableViewDelegate

  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    guard
      let displayBank = displayBank
      else { return }
    let displayRate = displayBank.currencies[indexPath.row]
    routerHandler?(displayRate.name,
                   displayRate.imageURL,
                   router?.dataStore?.exchange == .stock,
                   indexPath)
    tableView.deselectRow(at: indexPath, animated: true)
//    tableView.mp_deselectRow(at: indexPath, animated: true) //tableView.deselectRow(at: indexPath, animated: true)
  }

  // MARK: UITableViewDataSource

  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
    return allowTableViewEditing
  }

  func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
    guard let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: String(describing: BankHeader.self))
      as? BankHeader else {
        return R.nib.bankHeader.firstView(owner: self)
    }
    header.nameKey = R.string.uI.currency_title.key
    header.buyKey = R.string.uI.buy.key
    header.sellKey = R.string.uI.sell.key
    header.hasAccesscoryView = true
    header.reload()
    return header
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    guard let displayBank = displayBank else { return 0 }
    return displayBank.currencies.count
  }

  // Detect the end of loading of tableview
  // https://stackoverflow.com/questions/4163579/how-to-detect-the-end-of-loading-of-uitableview?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

      guard let cell = tableView.dequeueReusableCell(withIdentifier: R.nib.currencyCell.name) as? CurrencyCell
      else { return UITableViewCell() }

    let bgColor = indexPath.row % 2 == 0
      ? Configuration.Theme.lightGray
      : Configuration.Theme.white
    cell.backgroundColor = bgColor

    guard let displayBank = displayBank else { return cell }
    let displayCurrency = displayBank.currencies[indexPath.row]
    cell.bind(displayCurrency: displayCurrency)

    return cell
  }
}

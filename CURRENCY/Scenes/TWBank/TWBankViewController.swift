//
//  TWBankViewController.swift
//  CURRENCY
//
//  Created by Stan Liu on 22/03/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PagingMenuController
import SVProgressHUD

protocol TWBankDisplayLogic: class {
  func displayTitle(viewModel: TWBank.Title.ViewModel)
  func displayFetchedTWBanksSpecificCurrency(viewModel: TWBank.Fetch.ViewModel)
  func displayError(viewModel: Base.HandleError.ViewModel)
}

class TWBankViewController: UIViewController,
  TWBankDisplayLogic,
  LoadingControl,
  LanguageRelodable {
  var interactor: TWBankBusinessLogic?
  var router: (NSObjectProtocol & TWBankRoutingLogic & TWBankDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = TWBankInteractor()
    let presenter = TWBankPresenter()
    let router = TWBankRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  lazy var loadingView: LoadingView = {
    return LoadingView(frame: self.view.bounds)
  }()

  struct StockItem: MenuItemViewCustomizable {
    var displayMode: MenuItemDisplayMode {
      return .text(title: MenuItemText(text: LanguageWorker.shared.localizedString(key: R.string.uI.stock.key, table: .ui),
                                       color: Configuration.Theme.mediumGray,
                                       selectedColor: Configuration.Theme.textColor,
                                       font: Configuration.Font.letterFont,
                                       selectedFont: Configuration.Font.letterFont))
    }
  }
  struct CashItem: MenuItemViewCustomizable {
    var displayMode: MenuItemDisplayMode {
      return .text(title: MenuItemText(text: LanguageWorker.shared.localizedString(key: R.string.uI.cash.key, table: .ui),
                                       color: Configuration.Theme.mediumGray,
                                       selectedColor: Configuration.Theme.textColor,
                                       font: Configuration.Font.letterFont,
                                       selectedFont: Configuration.Font.letterFont))
    }
  }

  weak var stockVC: ListBankViewController? {
    return self.pageMenuOptions.stockVC
  }
  weak var cashVC: ListBankViewController? {
    return self.pageMenuOptions.cashVC
  }

  // custom page menu bar
  struct MenuOptions: MenuViewCustomizable {
    var height: CGFloat { return 40 }
    var displayMode: MenuDisplayMode { return .segmentedControl }

    var itemsOptions: [MenuItemViewCustomizable] {
      return [StockItem(), CashItem()]
    }
    var focusMode: MenuFocusMode {
      return .underline(height: 2,
                        color: Configuration.Theme.textColor,
                        horizontalPadding: 0,
                        verticalPadding: 0)
    }
  }

  // custom page menu controller type
  struct PageMenuOptions: PagingMenuControllerCustomizable {
    var stockVC: ListBankViewController = ListBankViewController()
    var cashVC: ListBankViewController = ListBankViewController()

    var componentType: ComponentType {
      return .all(menuOptions: MenuOptions(),
                  pagingControllers: [stockVC, cashVC])
    }
  }

  lazy var pageMenuOptions: PageMenuOptions = {
    return PageMenuOptions()
  }()

  // page menu root controller
  lazy var pagingMenuController: PagingMenuController = {
    return PagingMenuController(options: pageMenuOptions)
  }()

  override func viewDidLoad() {
    super.viewDidLoad()
    configurePageMenu()
    showTitle()
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    navigationController?.isNavigationBarHidden = false
  }

  func configurePageMenu() {
    addChild(pagingMenuController)
    view.addSubview(pagingMenuController.view)
    pagingMenuController.didMove(toParent: self)

    pagingMenuController.onMove = { state in
      switch state {
      case let .willMoveController(menuController, _): //previousMenuController
        //print("willMove: \(previousMenuController)")
        //print("menu: \(menuController)")
        if let destination = menuController as? ListBankViewController {
          if self.pagingMenuController.currentPage == 0 {
            self.router?.routeToCash(destination: destination)
          } else {
            self.router?.routeToStock(destination: destination)
          }
        }
      default:
        ()
      //case let .didMoveController(menuController, previousMenuController):
      //  print("didMove: \(previousMenuController)")
      //  print("menu: \(menuController)")
      //case let .willMoveItem(menuItemView, previousMenuItemView):
      //  print("willMoveItem: \(previousMenuItemView)")
      //  print("menu: \(menuItemView)")
      //case let .didMoveItem(menuItemView, previousMenuItemView):
      //  print("didMoveItem: \(previousMenuItemView)")
      //  print("menu: \(menuItemView)")
      //case .didScrollStart:
      //  print("Scroll start")
      //case .didScrollEnd:
      //  print("Scroll end")
      }
    }
  }

  func reloadLanguage() {
    showTitle()
    // Reload PageMenu Title
    /// FIXME:  stephen
//    pagingMenuController.reload(pageMenuOptions)
    // Reload PageMenu child viewcontroller
    self.pagingMenuController.pagingViewController?.controllers.forEach {
      if let vc = $0 as? LanguageRelodable {
        vc.reloadLanguage()
      }
      if let vc = $0 as? CurrencyReloadable {
        vc.reloadCurrency()
      }
    }
  }

  // MARK: Interactor actions

  func showTitle() {
    let request = TWBank.Title.Request()
    interactor?.fetchTitle(request: request)
  }

  func fetchAll() {
    showLoading()
    fetchStock()
    fetchCash()
  }

  func fetchStock() {
    let request = TWBank.Fetch.Request(exchangeType: .stock)
    interactor?.fetchTWBanksSpecificCurrency(request: request)
  }

  func fetchCash() {
    let request = TWBank.Fetch.Request(exchangeType: .cash)
    interactor?.fetchTWBanksSpecificCurrency(request: request)
  }


  // MARK: Display

  func displayTitle(viewModel: TWBank.Title.ViewModel) {
    let localizedTitle = LanguageWorker.shared.localizedString(key: viewModel.title,
                                                               table: .listCurrency)
    self.title = localizedTitle
  }

  func displayFetchedTWBanksSpecificCurrency(viewModel: TWBank.Fetch.ViewModel) {
    dismissLoading()
    guard let vc = viewModel.exchangeType == .stock
      ? stockVC
      : cashVC
      else { return }
    if viewModel.exchangeType == .stock {
      router?.routeToStock(destination: vc)
    } else {
      router?.routeToCash(destination: vc)
    }
  }

  func displayError(viewModel: Base.HandleError.ViewModel) {
    dismissLoading()
    SVProgressHUD.showError(withStatus: viewModel.error.localizedDescription)
  }
}

//
//  TWBankInteractor.swift
//  CURRENCY
//
//  Created by Stan Liu on 22/03/2018.
//  Copyright (c) 2018 Stan Liu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TWBankBusinessLogic {
  func fetchTitle(request: TWBank.Title.Request)
  func fetchTWBanksSpecificCurrency(request: TWBank.Fetch.Request)
}

protocol TWBankDataStore {
  var title: String { get set }
  var banksOfCash: [TWBank.Bank] { get set }
  var banksOfStock: [TWBank.Bank] { get set }
}

class TWBankInteractor: TWBankBusinessLogic, TWBankDataStore {
  var presenter: TWBankPresentationLogic?
  var worker: TWBankWorker = TWBankWorker()

  var title: String = ""
  var banksOfCash: [TWBank.Bank] = []
  var banksOfStock: [TWBank.Bank] = []

  func fetchTitle(request: TWBank.Title.Request) {
    let response = TWBank.Title.Response(title: title)
    presenter?.presentTitle(response: response)
  }

  func fetchTWBanksSpecificCurrency(request: TWBank.Fetch.Request) {
    worker.fetch(subject: title, exchange: request.exchangeType) { [weak self] (banks, error) in
      if let error = error {
        let response = Base.HandleError.Response(error: error)
        self?.presenter?.presentError(response: response)
        return
      }
      let twbanks = banks.map { (bank) -> TWBank.Bank in
        let currency = TWBank.Currency(name: bank.currency.name,
                                       buy: bank.currency.buy,
                                       sell: bank.currency.sell,
                                       lastUpdate: bank.currency.lastUpdate,
                                       imageURL: bank.currency.imageURL)
        return TWBank.Bank(name: bank.name,
                           swiftCode: bank.swiftCode,
                           fee: bank.fee,
                           imageURL: bank.imageURL,
                           currency: currency)
      }
      if request.exchangeType == .stock {
        self?.banksOfStock = CurrencyUnitWorker().setBank(with: twbanks)
      } else {
        self?.banksOfCash = CurrencyUnitWorker().setBank(with: twbanks)
      }
      let response = TWBank.Fetch.Response(exchangeType: request.exchangeType)
      self?.presenter?.presentFetchedTWBanksSpecificCurrency(response: response)
    }
  }
}
